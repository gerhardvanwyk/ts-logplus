{"version":3,"file":"typescript-logging.browser.js","sources":["../../src/logging/log/LoggerOptions.ts","../../src/logging/utils/DataStructures.ts","../../node_modules/stackframe/stackframe.js","../../node_modules/error-stack-parser/error-stack-parser.js","../../node_modules/stack-generator/node_modules/stackframe/stackframe.js","../../node_modules/stack-generator/stack-generator.js","../../node_modules/source-map/lib/util.js","../../node_modules/source-map/lib/binary-search.js","../../node_modules/source-map/lib/array-set.js","../../node_modules/source-map/lib/base64.js","../../node_modules/source-map/lib/base64-vlq.js","../../node_modules/source-map/lib/quick-sort.js","../../node_modules/source-map/lib/source-map-consumer.js","../../node_modules/stacktrace-gps/stacktrace-gps.js","../../node_modules/stacktrace-js/stacktrace.js","../../src/logging/utils/MessageUtils.ts","../../src/logging/log/standard/AbstractLogger.ts","../../src/logging/log/standard/ConsoleLoggerImpl.ts","../../src/logging/log/standard/MessageBufferLoggerImpl.ts","../../src/logging/log/standard/LogGroupRuntimeSettings.ts","../../src/logging/log/standard/LoggerFactoryImpl.ts","../../src/logging/log/category/AbstractCategoryLogger.ts","../../src/logging/log/category/CategoryConsoleLoggerImpl.ts","../../src/logging/log/category/CategoryDelegateLoggerImpl.ts","../../src/logging/log/category/CategoryExtensionLoggerImpl.ts","../../src/logging/log/category/CategoryMessageBufferImpl.ts","../../src/logging/log/category/CategoryRuntimeSettings.ts","../../src/logging/log/category/CategoryConfiguration.ts","../../src/logging/log/category/CategoryService.ts","../../src/logging/extension/ExtensionHelper.ts","../../src/logging/log/standard/LogGroupRule.ts","../../src/logging/log/standard/LoggerFactoryOptions.ts","../../src/logging/log/standard/LFService.ts","../../src/logging/control/LogGroupControl.ts","../../src/logging/control/CategoryServiceControl.ts","../../src/logging/log/category/Category.ts","../../src/logging/log/category/CategoryServiceFactory.ts","../../src/logging/utils/JSONHelper.ts","../../src/logging/typescript-logging.ts"],"sourcesContent":["/**\r\n * Log level for a logger.\r\n */\r\nexport enum LogLevel {\r\n\r\n  Finest,\r\n  Finer,\r\n  Fine,\r\n  Config,\r\n  Info,\r\n  Warning,\r\n  Severe\r\n}\r\n\r\n/* tslint:disable:no-namespace */\r\nexport namespace LogLevel {\r\n\r\n  /**\r\n   * Returns LogLevel based on string representation\r\n   * @param val Value\r\n   * @returns {LogLevel}, Error is thrown if invalid.\r\n   */\r\n  export function fromString(val: string): LogLevel {\r\n    if (val == null) {\r\n      throw new Error(\"Argument must be set\");\r\n    }\r\n\r\n    switch (val.toLowerCase()) {\r\n      case \"finest\":\r\n        return LogLevel.Finest;\r\n      case \"finer\":\r\n        return LogLevel.Finer;\r\n      case \"fine\":\r\n        return LogLevel.Fine;\r\n      case \"config\":\r\n        return LogLevel.Config;\r\n      case \"info\":\r\n        return LogLevel.Info;\r\n      case \"warning\":\r\n        return LogLevel.Warning;\r\n      case \"severe\":\r\n        return LogLevel.Severe;\r\n      default:\r\n        throw new Error(\"Unsupported value for conversion: \" + val);\r\n    }\r\n  }\r\n\r\n}\r\n/* tslint:disable:enable-namespace */\r\n\r\n/**\r\n * Where to log to? Pick one of the constants. Custom requires a callback to be present, see LFService.createLoggerFactory(...)\r\n * where this comes into play.\r\n */\r\nexport enum LoggerType {\r\n\r\n  Console,\r\n  MessageBuffer,\r\n  Custom\r\n}\r\n\r\n/**\r\n * Defines several date enums used for formatting a date.\r\n */\r\nexport enum DateFormatEnum {\r\n\r\n  /**\r\n   * Displays as: year-month-day hour:minute:second,millis -> 1999-02-12 23:59:59,123\r\n   * Note the date separator can be set separately.\r\n   */\r\n  Default,\r\n\r\n    /**\r\n     * Displays as: year-month-day hour:minute:second -> 1999-02-12 23:59:59\r\n     * Note the date separator can be set separately.\r\n     */\r\n  YearMonthDayTime,\r\n\r\n    /**\r\n     * Displays as: year-day-month hour:minute:second,millis -> 1999-12-02 23:59:59,123\r\n     * Note the date separator can be set separately.\r\n     */\r\n  YearDayMonthWithFullTime,\r\n\r\n    /**\r\n     * Displays as: year-day-month hour:minute:second -> 1999-12-02 23:59:59\r\n     * Note the date separator can be set separately.\r\n     */\r\n  YearDayMonthTime\r\n}\r\n\r\n/* tslint:disable:no-namespace */\r\nexport namespace DateFormatEnum {\r\n\r\n  /**\r\n   * Returns LogLevel based on string representation\r\n   * @param val Value\r\n   * @returns {LogLevel}, Error is thrown if invalid.\r\n   */\r\n  export function fromString(val: string): DateFormatEnum {\r\n    if (val == null) {\r\n      throw new Error(\"Argument must be set\");\r\n    }\r\n\r\n    switch (val.toLowerCase()) {\r\n      case \"default\":\r\n        return DateFormatEnum.Default;\r\n      case \"yearmonthdayTime\":\r\n        return DateFormatEnum.YearMonthDayTime;\r\n      case \"yeardaymonthwithfulltime\":\r\n        return DateFormatEnum.YearDayMonthWithFullTime;\r\n      case \"yeardaymonthtime\":\r\n        return DateFormatEnum.YearDayMonthTime;\r\n      default:\r\n        throw new Error(\"Unsupported value for conversion: \" + val);\r\n    }\r\n  }\r\n\r\n}\r\n/* tslint:disable:enable-namespace */\r\n\r\n/**\r\n * DateFormat class, stores data on how to format a date.\r\n */\r\nexport class DateFormat {\r\n\r\n  private _formatEnum: DateFormatEnum;\r\n  private _dateSeparator: string;\r\n\r\n  /**\r\n   * Constructor to define the dateformat used for logging, can be called empty as it uses defaults.\r\n   * @param formatEnum DateFormatEnum, use one of the constants from the enum. Defaults to DateFormatEnum.Default\r\n   * @param dateSeparator Separator used between dates, defaults to -\r\n   */\r\n  constructor(formatEnum: DateFormatEnum = DateFormatEnum.Default, dateSeparator: string = \"-\") {\r\n    this._formatEnum = formatEnum;\r\n    this._dateSeparator = dateSeparator;\r\n  }\r\n\r\n  get formatEnum(): DateFormatEnum {\r\n    return this._formatEnum;\r\n  }\r\n\r\n  set formatEnum(value: DateFormatEnum) {\r\n    this._formatEnum = value;\r\n  }\r\n\r\n  get dateSeparator(): string {\r\n    return this._dateSeparator;\r\n  }\r\n\r\n  set dateSeparator(value: string) {\r\n    this._dateSeparator = value;\r\n  }\r\n\r\n  public copy(): DateFormat {\r\n    return new DateFormat(this._formatEnum, this._dateSeparator);\r\n  }\r\n}\r\n\r\n/**\r\n * Information about the log format, what will a log line look like?\r\n */\r\nexport class LogFormat {\r\n\r\n  private _dateFormat: DateFormat;\r\n  private _showTimeStamp: boolean = true;\r\n  private _showLoggerName: boolean = true;\r\n\r\n  /**\r\n   * Constructor to create a LogFormat. Can be created without parameters where it will use sane defaults.\r\n   * @param dateFormat DateFormat (what needs the date look like in the log line)\r\n   * @param showTimeStamp Show date timestamp at all?\r\n   * @param showLoggerName Show the logger name?\r\n   */\r\n  constructor(dateFormat: DateFormat = new DateFormat(), showTimeStamp: boolean = true, showLoggerName: boolean = true) {\r\n    this._dateFormat = dateFormat;\r\n    this._showTimeStamp = showTimeStamp;\r\n    this._showLoggerName = showLoggerName;\r\n  }\r\n\r\n  get dateFormat(): DateFormat {\r\n    return this._dateFormat;\r\n  }\r\n\r\n  get showTimeStamp(): boolean {\r\n    return this._showTimeStamp;\r\n  }\r\n\r\n  set showTimeStamp(value: boolean) {\r\n    this._showTimeStamp = value;\r\n  }\r\n\r\n  get showLoggerName(): boolean {\r\n    return this._showLoggerName;\r\n  }\r\n\r\n  set showLoggerName(value: boolean) {\r\n    this._showLoggerName = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Information about the log format, what will a log line look like?\r\n */\r\nexport class CategoryLogFormat {\r\n\r\n  private _dateFormat: DateFormat;\r\n  private _showTimeStamp: boolean;\r\n  private _showCategoryName: boolean;\r\n\r\n  /**\r\n   * Create an instance defining the category log format used.\r\n   * @param dateFormat Date format (uses default), for details see DateFormat class.\r\n   * @param showTimeStamp True to show timestamp in the logging, defaults to true.\r\n   * @param showCategoryName True to show category name in the logging, defaults to true.\r\n   */\r\n  constructor(dateFormat: DateFormat = new DateFormat(), showTimeStamp: boolean = true, showCategoryName: boolean = true) {\r\n    this._dateFormat = dateFormat;\r\n    this._showTimeStamp = showTimeStamp;\r\n    this._showCategoryName = showCategoryName;\r\n  }\r\n\r\n  get dateFormat(): DateFormat {\r\n    return this._dateFormat;\r\n  }\r\n\r\n  set dateFormat(value: DateFormat) {\r\n    this._dateFormat = value;\r\n  }\r\n\r\n  get showTimeStamp(): boolean {\r\n    return this._showTimeStamp;\r\n  }\r\n\r\n  set showTimeStamp(value: boolean) {\r\n    this._showTimeStamp = value;\r\n  }\r\n\r\n  get showCategoryName(): boolean {\r\n    return this._showCategoryName;\r\n  }\r\n\r\n  set showCategoryName(value: boolean) {\r\n    this._showCategoryName = value;\r\n  }\r\n\r\n  public copy(): CategoryLogFormat {\r\n    return new CategoryLogFormat(this._dateFormat.copy(), this._showTimeStamp, this._showCategoryName);\r\n  }\r\n}\r\n","class LinkedNode<T> {\r\n\r\n  private _value: T;\r\n  private _previous: LinkedNode<T> | null = null;\r\n  private _next: LinkedNode<T> | null = null;\r\n\r\n  constructor(value: T) {\r\n    this._value = value;\r\n  }\r\n\r\n  get previous(): LinkedNode<T> | null {\r\n    return this._previous;\r\n  }\r\n\r\n  set previous(value: LinkedNode<T> | null) {\r\n    this._previous = value;\r\n  }\r\n\r\n  get next(): LinkedNode<T> | null {\r\n    return this._next;\r\n  }\r\n\r\n  set next(value: LinkedNode<T> | null) {\r\n    this._next = value;\r\n  }\r\n\r\n  get value(): T {\r\n    return this._value;\r\n  }\r\n}\r\n\r\n/**\r\n * Double linkedlist implementation.\r\n */\r\nexport class LinkedList<T> {\r\n\r\n  private head: LinkedNode<T> | null = null;\r\n  private size: number = 0;\r\n\r\n  public addHead(value: T): void {\r\n    if (!this.createHeadIfNeeded(value)) {\r\n      if (this.head != null) {\r\n        const nextNode = this.head.next;\r\n        const newHeadNode = new LinkedNode<T>(value);\r\n        if (nextNode != null) {\r\n          nextNode.previous = newHeadNode;\r\n          newHeadNode.next = nextNode;\r\n        }\r\n        this.head = newHeadNode;\r\n      }\r\n      else {\r\n        throw new Error(\"This should never happen, list implementation broken\");\r\n      }\r\n    }\r\n    this.size++;\r\n  }\r\n\r\n  public addTail(value: T): void {\r\n    if (!this.createHeadIfNeeded(value)) {\r\n      const oldTailNode = this.getTailNode();\r\n      if (oldTailNode != null) {\r\n        const newTailNode = new LinkedNode<T>(value);\r\n        oldTailNode.next = newTailNode;\r\n        newTailNode.previous = oldTailNode;\r\n      }\r\n      else {\r\n        throw new Error(\"List implementation broken\");\r\n      }\r\n    }\r\n    this.size++;\r\n  }\r\n\r\n  public clear() {\r\n    this.head = null;\r\n    this.size = 0;\r\n  }\r\n\r\n  public getHead(): T | null {\r\n    if (this.head != null) {\r\n      return this.head.value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public removeHead(): T | null {\r\n    if (this.head != null) {\r\n      const oldHead = this.head;\r\n      const value = oldHead.value;\r\n      this.head = oldHead.next;\r\n      this.size--;\r\n      return value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public getTail(): T | null {\r\n    const node = this.getTailNode();\r\n    if (node != null) {\r\n      return node.value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public removeTail(): T | null {\r\n    const node = this.getTailNode();\r\n    if (node != null) {\r\n      if (node === this.head) {\r\n        this.head = null;\r\n      }\r\n      else {\r\n        const previousNode = node.previous;\r\n        if (previousNode != null) {\r\n          previousNode.next = null;\r\n        }\r\n        else {\r\n          throw new Error(\"List implementation is broken\");\r\n        }\r\n      }\r\n      this.size--;\r\n      return node.value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public getSize(): number {\r\n    return this.size;\r\n  }\r\n\r\n  public filter(f: (value: T) => boolean): T[] {\r\n    const recurse = (fn: (value: T) => boolean, node: LinkedNode<T>, values: T[]) => {\r\n      if (fn(node.value)) {\r\n        values.push(node.value);\r\n      }\r\n\r\n      const nextNode = node.next;\r\n      if (nextNode != null) {\r\n        recurse(fn, nextNode, values);\r\n      }\r\n    };\r\n\r\n    const result: T[] = [];\r\n    const currentNode = this.head;\r\n    if (currentNode != null) {\r\n      recurse(f, currentNode, result);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private createHeadIfNeeded(value: T): boolean {\r\n    if (this.head == null) {\r\n      this.head = new LinkedNode(value);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private getTailNode(): LinkedNode<T> | null {\r\n    if (this.head == null) {\r\n      return null;\r\n    }\r\n\r\n    let node = this.head;\r\n    while (node.next != null) {\r\n      node = node.next;\r\n    }\r\n\r\n    return node;\r\n  }\r\n}\r\n\r\n/**\r\n * Map implementation keyed by string (always).\r\n */\r\nexport class SimpleMap<V> {\r\n\r\n  private array: {[key: string]: V} = {};\r\n\r\n  public put(key: string, value: V): void {\r\n    this.array[key] = value;\r\n  }\r\n\r\n  public get(key: string): V | undefined {\r\n    return this.array[key];\r\n  }\r\n\r\n  public exists(key: string): boolean {\r\n    const value = this.array[key];\r\n    return (typeof value !== \"undefined\");\r\n\r\n  }\r\n\r\n  public remove(key: string): V | undefined {\r\n    const value = this.array[key];\r\n    if (typeof value !== \"undefined\") {\r\n      delete this.array[key];\r\n    }\r\n    return value;\r\n  }\r\n\r\n  public keys(): string[] {\r\n    const keys: string[] = [];\r\n    for (const key in this.array) {\r\n      // To prevent random stuff to appear\r\n      if (this.array.hasOwnProperty(key)) {\r\n        keys.push(key);\r\n      }\r\n    }\r\n    return keys;\r\n  }\r\n\r\n  public values(): V[] {\r\n    const values: V[] = [];\r\n    for (const key in this.array) {\r\n      // To prevent random stuff to appear\r\n      if (this.array.hasOwnProperty(key)) {\r\n        values.push(this.get(key) as V);\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  public size(): number {\r\n    return this.keys().length;\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n    return this.size() === 0;\r\n  }\r\n\r\n  public clear(): void {\r\n    this.array = {};\r\n  }\r\n\r\n  public forEach(cbFunction: (key: string, value: V, index: number) => void): void {\r\n    let count = 0;\r\n    for (const key in this.array) {\r\n      // To prevent random stuff to appear\r\n      if (this.array.hasOwnProperty(key)) {\r\n        const value = this.array[key];\r\n        cbFunction(key, value, count);\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n\r\n  public forEachValue(cbFunction: (value: V, index: number) => void): void {\r\n    let count = 0;\r\n    for (const key in this.array) {\r\n      // To prevent random stuff to appear\r\n      if (this.array.hasOwnProperty(key)) {\r\n        const value = this.array[key];\r\n        cbFunction(value, count);\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Tuple to hold two values.\r\n */\r\nexport class TuplePair<X, Y> {\r\n\r\n  private _x: X;\r\n  private _y: Y;\r\n\r\n  constructor(x: X, y: Y) {\r\n    this._x = x;\r\n    this._y = y;\r\n  }\r\n\r\n  get x(): X {\r\n    return this._x;\r\n  }\r\n\r\n  set x(value: X) {\r\n    this._x = value;\r\n  }\r\n\r\n  get y(): Y {\r\n    return this._y;\r\n  }\r\n\r\n  set y(value: Y) {\r\n    this._y = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility class to build up a string.\r\n */\r\nexport class StringBuilder {\r\n\r\n  private data: string[] = [];\r\n\r\n  public append(line: string): StringBuilder {\r\n    if (line === undefined || line == null) {\r\n      throw new Error(\"String must be set, cannot append null or undefined\");\r\n    }\r\n    this.data.push(line);\r\n    return this;\r\n  }\r\n\r\n  public appendLine(line: string): StringBuilder {\r\n    this.data.push(line + \"\\n\");\r\n    return this;\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n    return this.data.length === 0;\r\n  }\r\n\r\n  public clear(): void {\r\n    this.data = [];\r\n  }\r\n\r\n  public toString(separator: string = \"\"): string {\r\n    return this.data.join(separator);\r\n  }\r\n}\r\n","(function (root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function () {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function StackFrame(functionName, args, fileName, lineNumber, columnNumber, source) {\n        if (functionName !== undefined) {\n            this.setFunctionName(functionName);\n        }\n        if (args !== undefined) {\n            this.setArgs(args);\n        }\n        if (fileName !== undefined) {\n            this.setFileName(fileName);\n        }\n        if (lineNumber !== undefined) {\n            this.setLineNumber(lineNumber);\n        }\n        if (columnNumber !== undefined) {\n            this.setColumnNumber(columnNumber);\n        }\n        if (source !== undefined) {\n            this.setSource(source);\n        }\n    }\n\n    StackFrame.prototype = {\n        getFunctionName: function () {\n            return this.functionName;\n        },\n        setFunctionName: function (v) {\n            this.functionName = String(v);\n        },\n\n        getArgs: function () {\n            return this.args;\n        },\n        setArgs: function (v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        // NOTE: Property name may be misleading as it includes the path,\n        // but it somewhat mirrors V8's JavaScriptStackTraceApi\n        // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi and Gecko's\n        // http://mxr.mozilla.org/mozilla-central/source/xpcom/base/nsIException.idl#14\n        getFileName: function () {\n            return this.fileName;\n        },\n        setFileName: function (v) {\n            this.fileName = String(v);\n        },\n\n        getLineNumber: function () {\n            return this.lineNumber;\n        },\n        setLineNumber: function (v) {\n            if (!_isNumber(v)) {\n                throw new TypeError('Line Number must be a Number');\n            }\n            this.lineNumber = Number(v);\n        },\n\n        getColumnNumber: function () {\n            return this.columnNumber;\n        },\n        setColumnNumber: function (v) {\n            if (!_isNumber(v)) {\n                throw new TypeError('Column Number must be a Number');\n            }\n            this.columnNumber = Number(v);\n        },\n\n        getSource: function () {\n            return this.source;\n        },\n        setSource: function (v) {\n            this.source = String(v);\n        },\n\n        toString: function() {\n            var functionName = this.getFunctionName() || '{anonymous}';\n            var args = '(' + (this.getArgs() || []).join(',') + ')';\n            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';\n            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';\n            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';\n            return functionName + args + fileName + lineNumber + columnNumber;\n        }\n    };\n\n    return StackFrame;\n}));\n","(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('error-stack-parser', ['stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('stackframe'));\n    } else {\n        root.ErrorStackParser = factory(root.StackFrame);\n    }\n}(this, function ErrorStackParser(StackFrame) {\n    'use strict';\n\n    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+\\:\\d+/;\n    var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+\\:\\d+|\\(native\\))/m;\n    var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code\\])?$/;\n\n    function _map(array, fn, thisArg) {\n        if (typeof Array.prototype.map === 'function') {\n            return array.map(fn, thisArg);\n        } else {\n            var output = new Array(array.length);\n            for (var i = 0; i < array.length; i++) {\n                output[i] = fn.call(thisArg, array[i]);\n            }\n            return output;\n        }\n    }\n\n    function _filter(array, fn, thisArg) {\n        if (typeof Array.prototype.filter === 'function') {\n            return array.filter(fn, thisArg);\n        } else {\n            var output = [];\n            for (var i = 0; i < array.length; i++) {\n                if (fn.call(thisArg, array[i])) {\n                    output.push(array[i]);\n                }\n            }\n            return output;\n        }\n    }\n\n    function _indexOf(array, target) {\n        if (typeof Array.prototype.indexOf === 'function') {\n            return array.indexOf(target);\n        } else {\n            for (var i = 0; i < array.length; i++) {\n                if (array[i] === target) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n    }\n\n    return {\n        /**\n         * Given an Error object, extract the most information from it.\n         *\n         * @param {Error} error object\n         * @return {Array} of StackFrames\n         */\n        parse: function ErrorStackParser$$parse(error) {\n            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n                return this.parseOpera(error);\n            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n                return this.parseV8OrIE(error);\n            } else if (error.stack) {\n                return this.parseFFOrSafari(error);\n            } else {\n                throw new Error('Cannot parse given Error object');\n            }\n        },\n\n        // Separate line and column numbers from a string of the form: (URI:Line:Column)\n        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n            // Fail-fast but return locations like \"(native)\"\n            if (urlLike.indexOf(':') === -1) {\n                return [urlLike];\n            }\n\n            var regExp = /(.+?)(?:\\:(\\d+))?(?:\\:(\\d+))?$/;\n            var parts = regExp.exec(urlLike.replace(/[\\(\\)]/g, ''));\n            return [parts[1], parts[2] || undefined, parts[3] || undefined];\n        },\n\n        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n            var filtered = _filter(error.stack.split('\\n'), function(line) {\n                return !!line.match(CHROME_IE_STACK_REGEXP);\n            }, this);\n\n            return _map(filtered, function(line) {\n                if (line.indexOf('(eval ') > -1) {\n                    // Throw away eval information until we implement stacktrace.js/stackframe#8\n                    line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^\\()]*)|(\\)\\,.*$)/g, '');\n                }\n                var tokens = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(').split(/\\s+/).slice(1);\n                var locationParts = this.extractLocation(tokens.pop());\n                var functionName = tokens.join(' ') || undefined;\n                var fileName = _indexOf(['eval', '<anonymous>'], locationParts[0]) > -1 ? undefined : locationParts[0];\n\n                return new StackFrame(functionName, undefined, fileName, locationParts[1], locationParts[2], line);\n            }, this);\n        },\n\n        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n            var filtered = _filter(error.stack.split('\\n'), function(line) {\n                return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n            }, this);\n\n            return _map(filtered, function(line) {\n                // Throw away eval information until we implement stacktrace.js/stackframe#8\n                if (line.indexOf(' > eval') > -1) {\n                    line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval\\:\\d+\\:\\d+/g, ':$1');\n                }\n\n                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n                    // Safari eval frames only have function names and nothing else\n                    return new StackFrame(line);\n                } else {\n                    var tokens = line.split('@');\n                    var locationParts = this.extractLocation(tokens.pop());\n                    var functionName = tokens.join('@') || undefined;\n                    return new StackFrame(functionName,\n                        undefined,\n                        locationParts[0],\n                        locationParts[1],\n                        locationParts[2],\n                        line);\n                }\n            }, this);\n        },\n\n        parseOpera: function ErrorStackParser$$parseOpera(e) {\n            if (!e.stacktrace || (e.message.indexOf('\\n') > -1 &&\n                e.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\n                return this.parseOpera9(e);\n            } else if (!e.stack) {\n                return this.parseOpera10(e);\n            } else {\n                return this.parseOpera11(e);\n            }\n        },\n\n        parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n            var lines = e.message.split('\\n');\n            var result = [];\n\n            for (var i = 2, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(new StackFrame(undefined, undefined, match[2], match[1], undefined, lines[i]));\n                }\n            }\n\n            return result;\n        },\n\n        parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n            var lines = e.stacktrace.split('\\n');\n            var result = [];\n\n            for (var i = 0, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(\n                        new StackFrame(\n                            match[3] || undefined,\n                            undefined,\n                            match[2],\n                            match[1],\n                            undefined,\n                            lines[i]\n                        )\n                    );\n                }\n            }\n\n            return result;\n        },\n\n        // Opera 10.65+ Error.stack very similar to FF/Safari\n        parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n            var filtered = _filter(error.stack.split('\\n'), function(line) {\n                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n            }, this);\n\n            return _map(filtered, function(line) {\n                var tokens = line.split('@');\n                var locationParts = this.extractLocation(tokens.pop());\n                var functionCall = (tokens.shift() || '');\n                var functionName = functionCall\n                        .replace(/<anonymous function(: (\\w+))?>/, '$2')\n                        .replace(/\\([^\\)]*\\)/g, '') || undefined;\n                var argsRaw;\n                if (functionCall.match(/\\(([^\\)]*)\\)/)) {\n                    argsRaw = functionCall.replace(/^[^\\(]+\\(([^\\)]*)\\)$/, '$1');\n                }\n                var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?\n                    undefined : argsRaw.split(',');\n                return new StackFrame(\n                    functionName,\n                    args,\n                    locationParts[0],\n                    locationParts[1],\n                    locationParts[2],\n                    line);\n            }, this);\n        }\n    };\n}));\n\n","(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function() {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function _capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.substring(1);\n    }\n\n    function _getter(p) {\n        return function() {\n            return this[p];\n        };\n    }\n\n    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n    var numericProps = ['columnNumber', 'lineNumber'];\n    var stringProps = ['fileName', 'functionName', 'source'];\n    var arrayProps = ['args'];\n\n    var props = booleanProps.concat(numericProps, stringProps, arrayProps);\n\n    function StackFrame(obj) {\n        if (obj instanceof Object) {\n            for (var i = 0; i < props.length; i++) {\n                if (obj.hasOwnProperty(props[i]) && obj[props[i]] !== undefined) {\n                    this['set' + _capitalize(props[i])](obj[props[i]]);\n                }\n            }\n        }\n    }\n\n    StackFrame.prototype = {\n        getArgs: function() {\n            return this.args;\n        },\n        setArgs: function(v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        getEvalOrigin: function() {\n            return this.evalOrigin;\n        },\n        setEvalOrigin: function(v) {\n            if (v instanceof StackFrame) {\n                this.evalOrigin = v;\n            } else if (v instanceof Object) {\n                this.evalOrigin = new StackFrame(v);\n            } else {\n                throw new TypeError('Eval Origin must be an Object or StackFrame');\n            }\n        },\n\n        toString: function() {\n            var functionName = this.getFunctionName() || '{anonymous}';\n            var args = '(' + (this.getArgs() || []).join(',') + ')';\n            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';\n            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';\n            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';\n            return functionName + args + fileName + lineNumber + columnNumber;\n        }\n    };\n\n    for (var i = 0; i < booleanProps.length; i++) {\n        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function(p) {\n            return function(v) {\n                this[p] = Boolean(v);\n            };\n        })(booleanProps[i]);\n    }\n\n    for (var j = 0; j < numericProps.length; j++) {\n        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n        StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function(p) {\n            return function(v) {\n                if (!_isNumber(v)) {\n                    throw new TypeError(p + ' must be a Number');\n                }\n                this[p] = Number(v);\n            };\n        })(numericProps[j]);\n    }\n\n    for (var k = 0; k < stringProps.length; k++) {\n        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n        StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function(p) {\n            return function(v) {\n                this[p] = String(v);\n            };\n        })(stringProps[k]);\n    }\n\n    return StackFrame;\n}));\n","(function (root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stack-generator', ['stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('stackframe'));\n    } else {\n        root.StackGenerator = factory(root.StackFrame);\n    }\n}(this, function (StackFrame) {\n    return {\n        backtrace: function StackGenerator$$backtrace(opts) {\n            var stack = [];\n            var maxStackSize = 10;\n\n            if (typeof opts === 'object' && typeof opts.maxStackSize === 'number') {\n                maxStackSize = opts.maxStackSize;\n            }\n\n            var curr = arguments.callee;\n            while (curr && stack.length < maxStackSize) {\n                // Allow V8 optimizations\n                var args = new Array(curr['arguments'].length);\n                for(var i = 0; i < args.length; ++i) {\n                    args[i] = curr['arguments'][i];\n                }\n                if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n                    stack.push(new StackFrame({functionName: RegExp.$1 || undefined, args: args}));\n                } else {\n                    stack.push(new StackFrame({args: args}));\n                }\n\n                try {\n                    curr = curr.caller;\n                } catch (e) {\n                    break;\n                }\n            }\n            return stack;\n        }\n    };\n}));\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = util.toSetString(aStr);\n  var isDuplicate = has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    this._set[sStr] = idx;\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  var sStr = util.toSetString(aStr);\n  return has.call(this._set, sStr);\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  var sStr = util.toSetString(aStr);\n  if (has.call(this._set, sStr)) {\n    return this._set[sStr];\n  }\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap)\n    : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n","(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stacktrace-gps', ['source-map', 'stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('source-map/lib/source-map-consumer'), require('stackframe'));\n    } else {\n        root.StackTraceGPS = factory(root.SourceMap || root.sourceMap, root.StackFrame);\n    }\n}(this, function(SourceMap, StackFrame) {\n    'use strict';\n\n    /**\n     * Make a X-Domain request to url and callback.\n     *\n     * @param {String} url\n     * @returns {Promise} with response text if fulfilled\n     */\n    function _xdr(url) {\n        return new Promise(function(resolve, reject) {\n            var req = new XMLHttpRequest();\n            req.open('get', url);\n            req.onerror = reject;\n            req.onreadystatechange = function onreadystatechange() {\n                if (req.readyState === 4) {\n                    if (req.status >= 200 && req.status < 300) {\n                        resolve(req.responseText);\n                    } else {\n                        reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url));\n                    }\n                }\n            };\n            req.send();\n        });\n\n    }\n\n    /**\n     * Convert a Base64-encoded string into its original representation.\n     * Used for inline sourcemaps.\n     *\n     * @param {String} b64str Base-64 encoded string\n     * @returns {String} original representation of the base64-encoded string.\n     */\n    function _atob(b64str) {\n        if (typeof window !== 'undefined' && window.atob) {\n            return window.atob(b64str);\n        } else {\n            throw new Error('You must supply a polyfill for window.atob in this environment');\n        }\n    }\n\n    function _parseJson(string) {\n        if (typeof JSON !== 'undefined' && JSON.parse) {\n            return JSON.parse(string);\n        } else {\n            throw new Error('You must supply a polyfill for JSON.parse in this environment');\n        }\n    }\n\n    function _findFunctionName(source, lineNumber/*, columnNumber*/) {\n        // function {name}({args}) m[1]=name m[2]=args\n        var reFunctionDeclaration = /function\\s+([^(]*?)\\s*\\(([^)]*)\\)/;\n        // {name} = function ({args}) TODO args capture\n        var reFunctionExpression = /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/;\n        // {name} = eval()\n        var reFunctionEvaluation = /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/;\n        var lines = source.split('\\n');\n\n        // Walk backwards in the source lines until we find the line which matches one of the patterns above\n        var code = '';\n        var maxLines = Math.min(lineNumber, 20);\n        var m;\n        for (var i = 0; i < maxLines; ++i) {\n            // lineNo is 1-based, source[] is 0-based\n            var line = lines[lineNumber - i - 1];\n            var commentPos = line.indexOf('//');\n            if (commentPos >= 0) {\n                line = line.substr(0, commentPos);\n            }\n\n            if (line) {\n                code = line + code;\n                m = reFunctionExpression.exec(code);\n                if (m && m[1]) {\n                    return m[1];\n                }\n                m = reFunctionDeclaration.exec(code);\n                if (m && m[1]) {\n                    return m[1];\n                }\n                m = reFunctionEvaluation.exec(code);\n                if (m && m[1]) {\n                    return m[1];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    function _ensureSupportedEnvironment() {\n        if (typeof Object.defineProperty !== 'function' || typeof Object.create !== 'function') {\n            throw new Error('Unable to consume source maps in older browsers');\n        }\n    }\n\n    function _ensureStackFrameIsLegit(stackframe) {\n        if (typeof stackframe !== 'object') {\n            throw new TypeError('Given StackFrame is not an object');\n        } else if (typeof stackframe.fileName !== 'string') {\n            throw new TypeError('Given file name is not a String');\n        } else if (typeof stackframe.lineNumber !== 'number' ||\n            stackframe.lineNumber % 1 !== 0 ||\n            stackframe.lineNumber < 1) {\n            throw new TypeError('Given line number must be a positive integer');\n        } else if (typeof stackframe.columnNumber !== 'number' ||\n            stackframe.columnNumber % 1 !== 0 ||\n            stackframe.columnNumber < 0) {\n            throw new TypeError('Given column number must be a non-negative integer');\n        }\n        return true;\n    }\n\n    function _findSourceMappingURL(source) {\n        var m = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/.exec(source);\n        if (m && m[1]) {\n            return m[1];\n        } else {\n            throw new Error('sourceMappingURL not found');\n        }\n    }\n\n    function _extractLocationInfoFromSourceMap(stackframe, rawSourceMap, sourceCache) {\n        return new Promise(function(resolve, reject) {\n            var mapConsumer = new SourceMap.SourceMapConsumer(rawSourceMap);\n\n            var loc = mapConsumer.originalPositionFor({\n                line: stackframe.lineNumber,\n                column: stackframe.columnNumber\n            });\n\n            if (loc.source) {\n                var mappedSource = mapConsumer.sourceContentFor(loc.source);\n                if (mappedSource) {\n                    sourceCache[loc.source] = mappedSource;\n                }\n                resolve(\n                    new StackFrame(\n                        loc.name || stackframe.functionName,\n                        stackframe.args,\n                        loc.source,\n                        loc.line,\n                        loc.column));\n            } else {\n                reject(new Error('Could not get original source for given stackframe and source map'));\n            }\n        });\n    }\n\n    /**\n     * @constructor\n     * @param {Object} opts\n     *      opts.sourceCache = {url: \"Source String\"} => preload source cache\n     *      opts.offline = True to prevent network requests.\n     *              Best effort without sources or source maps.\n     *      opts.ajax = Promise returning function to make X-Domain requests\n     */\n    return function StackTraceGPS(opts) {\n        if (!(this instanceof StackTraceGPS)) {\n            return new StackTraceGPS(opts);\n        }\n        opts = opts || {};\n\n        this.sourceCache = opts.sourceCache || {};\n\n        this.ajax = opts.ajax || _xdr;\n\n        this._atob = opts.atob || _atob;\n\n        this._get = function _get(location) {\n            return new Promise(function(resolve, reject) {\n                var isDataUrl = location.substr(0, 5) === 'data:';\n                if (this.sourceCache[location]) {\n                    resolve(this.sourceCache[location]);\n                } else if (opts.offline && !isDataUrl) {\n                    reject(new Error('Cannot make network requests in offline mode'));\n                } else {\n                    if (isDataUrl) {\n                        // data URLs can have parameters.\n                        // see http://tools.ietf.org/html/rfc2397\n                        var supportedEncodingRegexp =\n                            /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n                        var match = location.match(supportedEncodingRegexp);\n                        if (match) {\n                            var sourceMapStart = match[0].length;\n                            var encodedSource = location.substr(sourceMapStart);\n                            var source = this._atob(encodedSource);\n                            this.sourceCache[location] = source;\n                            resolve(source);\n                        } else {\n                            reject(new Error('The encoding of the inline sourcemap is not supported'));\n                        }\n                    } else {\n                        var xhrPromise = this.ajax(location, {method: 'get'});\n                        // Cache the Promise to prevent duplicate in-flight requests\n                        this.sourceCache[location] = xhrPromise;\n                        xhrPromise.then(resolve, reject);\n                    }\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, enhance function name and use source maps for a\n         * better StackFrame.\n         *\n         * @param {StackFrame} stackframe object\n         * @returns {Promise} that resolves with with source-mapped StackFrame\n         */\n        this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {\n            return new Promise(function(resolve, reject) {\n                this.getMappedLocation(stackframe).then(function(mappedStackFrame) {\n                    function resolveMappedStackFrame() {\n                        resolve(mappedStackFrame);\n                    }\n\n                    this.findFunctionName(mappedStackFrame)\n                        .then(resolve, resolveMappedStackFrame)\n                        ['catch'](resolveMappedStackFrame);\n                }.bind(this), reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, guess function name from location information.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureStackFrameIsLegit(stackframe);\n                this._get(stackframe.fileName).then(function getSourceCallback(source) {\n                    var lineNumber = stackframe.lineNumber;\n                    var columnNumber = stackframe.columnNumber;\n                    var guessedFunctionName = _findFunctionName(source, lineNumber, columnNumber);\n                    // Only replace functionName if we found something\n                    if (guessedFunctionName) {\n                        resolve(new StackFrame(guessedFunctionName,\n                            stackframe.args,\n                            stackframe.fileName,\n                            lineNumber,\n                            columnNumber));\n                    } else {\n                        resolve(stackframe);\n                    }\n                }, reject)['catch'](reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureSupportedEnvironment();\n                _ensureStackFrameIsLegit(stackframe);\n\n                var sourceCache = this.sourceCache;\n                var fileName = stackframe.fileName;\n                this._get(fileName).then(function(source) {\n                    var sourceMappingURL = _findSourceMappingURL(source);\n                    var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:';\n                    var base = fileName.substring(0, fileName.lastIndexOf('/') + 1);\n\n                    if (sourceMappingURL[0] !== '/' && !isDataUrl && !(/^https?:\\/\\/|^\\/\\//i).test(sourceMappingURL)) {\n                        sourceMappingURL = base + sourceMappingURL;\n                    }\n\n                    this._get(sourceMappingURL).then(function(sourceMap) {\n                        if (typeof sourceMap === 'string') {\n                            sourceMap = _parseJson(sourceMap.replace(/^\\)\\]\\}'/, ''));\n                        }\n                        if (typeof sourceMap.sourceRoot === 'undefined') {\n                            sourceMap.sourceRoot = base;\n                        }\n\n                        _extractLocationInfoFromSourceMap(stackframe, sourceMap, sourceCache)\n                            .then(resolve)['catch'](function() {\n                            resolve(stackframe);\n                        });\n                    }, reject)['catch'](reject);\n                }.bind(this), reject)['catch'](reject);\n            }.bind(this));\n        };\n    };\n}));\n","(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stacktrace', ['error-stack-parser', 'stack-generator', 'stacktrace-gps'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('error-stack-parser'), require('stack-generator'), require('stacktrace-gps'));\n    } else {\n        root.StackTrace = factory(root.ErrorStackParser, root.StackGenerator, root.StackTraceGPS);\n    }\n}(this, function StackTrace(ErrorStackParser, StackGenerator, StackTraceGPS) {\n    var _options = {\n        filter: function(stackframe) {\n            // Filter out stackframes for this library by default\n            return (stackframe.functionName || '').indexOf('StackTrace$$') === -1 &&\n                (stackframe.functionName || '').indexOf('ErrorStackParser$$') === -1 &&\n                (stackframe.functionName || '').indexOf('StackTraceGPS$$') === -1 &&\n                (stackframe.functionName || '').indexOf('StackGenerator$$') === -1;\n        },\n        sourceCache: {}\n    };\n\n    var _generateError = function StackTrace$$GenerateError() {\n        try {\n            // Error must be thrown to get stack in IE\n            throw new Error();\n        } catch (err) {\n            return err;\n        }\n    };\n\n    /**\n     * Merge 2 given Objects. If a conflict occurs the second object wins.\n     * Does not do deep merges.\n     *\n     * @param {Object} first base object\n     * @param {Object} second overrides\n     * @returns {Object} merged first and second\n     * @private\n     */\n    function _merge(first, second) {\n        var target = {};\n\n        [first, second].forEach(function(obj) {\n            for (var prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    target[prop] = obj[prop];\n                }\n            }\n            return target;\n        });\n\n        return target;\n    }\n\n    function _isShapedLikeParsableError(err) {\n        return err.stack || err['opera#sourceloc'];\n    }\n\n    function _filtered(stackframes, filter) {\n        if (typeof filter === 'function') {\n            return stackframes.filter(filter);\n        }\n        return stackframes;\n    }\n\n    return {\n        /**\n         * Get a backtrace from invocation point.\n         *\n         * @param {Object} opts\n         * @returns {Array} of StackFrame\n         */\n        get: function StackTrace$$get(opts) {\n            var err = _generateError();\n            return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n        },\n\n        /**\n         * Get a backtrace from invocation point.\n         * IMPORTANT: Does not handle source maps or guess function names!\n         *\n         * @param {Object} opts\n         * @returns {Array} of StackFrame\n         */\n        getSync: function StackTrace$$getSync(opts) {\n            opts = _merge(_options, opts);\n            var err = _generateError();\n            var stack = _isShapedLikeParsableError(err) ? ErrorStackParser.parse(err) : StackGenerator.backtrace(opts);\n            return _filtered(stack, opts.filter);\n        },\n\n        /**\n         * Given an error object, parse it.\n         *\n         * @param {Error} error object\n         * @param {Object} opts\n         * @returns {Promise} for Array[StackFrame}\n         */\n        fromError: function StackTrace$$fromError(error, opts) {\n            opts = _merge(_options, opts);\n            var gps = new StackTraceGPS(opts);\n            return new Promise(function(resolve) {\n                var stackframes = _filtered(ErrorStackParser.parse(error), opts.filter);\n                resolve(Promise.all(stackframes.map(function(sf) {\n                    return new Promise(function(resolve) {\n                        function resolveOriginal() {\n                            resolve(sf);\n                        }\n\n                        gps.pinpoint(sf).then(resolve, resolveOriginal)['catch'](resolveOriginal);\n                    });\n                })));\n            }.bind(this));\n        },\n\n        /**\n         * Use StackGenerator to generate a backtrace.\n         *\n         * @param {Object} opts\n         * @returns {Promise} of Array[StackFrame]\n         */\n        generateArtificially: function StackTrace$$generateArtificially(opts) {\n            opts = _merge(_options, opts);\n            var stackFrames = StackGenerator.backtrace(opts);\n            if (typeof opts.filter === 'function') {\n                stackFrames = stackFrames.filter(opts.filter);\n            }\n            return Promise.resolve(stackFrames);\n        },\n\n        /**\n         * Given a function, wrap it such that invocations trigger a callback that\n         * is called with a stack trace.\n         *\n         * @param {Function} fn to be instrumented\n         * @param {Function} callback function to call with a stack trace on invocation\n         * @param {Function} errback optional function to call with error if unable to get stack trace.\n         * @param {Object} thisArg optional context object (e.g. window)\n         */\n        instrument: function StackTrace$$instrument(fn, callback, errback, thisArg) {\n            if (typeof fn !== 'function') {\n                throw new Error('Cannot instrument non-function object');\n            } else if (typeof fn.__stacktraceOriginalFn === 'function') {\n                // Already instrumented, return given Function\n                return fn;\n            }\n\n            var instrumented = function StackTrace$$instrumented() {\n                try {\n                    this.get().then(callback, errback)['catch'](errback);\n                    return fn.apply(thisArg || this, arguments);\n                } catch (e) {\n                    if (_isShapedLikeParsableError(e)) {\n                        this.fromError(e).then(callback, errback)['catch'](errback);\n                    }\n                    throw e;\n                }\n            }.bind(this);\n            instrumented.__stacktraceOriginalFn = fn;\n\n            return instrumented;\n        },\n\n        /**\n         * Given a function that has been instrumented,\n         * revert the function to it's original (non-instrumented) state.\n         *\n         * @param {Function} fn to de-instrument\n         */\n        deinstrument: function StackTrace$$deinstrument(fn) {\n            if (typeof fn !== 'function') {\n                throw new Error('Cannot de-instrument non-function object');\n            } else if (typeof fn.__stacktraceOriginalFn === 'function') {\n                return fn.__stacktraceOriginalFn;\n            } else {\n                // Function not instrumented, return original\n                return fn;\n            }\n        },\n\n        /**\n         * Given an error message and Array of StackFrames, serialize and POST to given URL.\n         *\n         * @param {Array} stackframes\n         * @param {String} url\n         * @param {String} errorMsg\n         */\n        report: function StackTrace$$report(stackframes, url, errorMsg) {\n            return new Promise(function(resolve, reject) {\n                var req = new XMLHttpRequest();\n                req.onerror = reject;\n                req.onreadystatechange = function onreadystatechange() {\n                    if (req.readyState === 4) {\n                        if (req.status >= 200 && req.status < 400) {\n                            resolve(req.responseText);\n                        } else {\n                            reject(new Error('POST to ' + url + ' failed with status: ' + req.status));\n                        }\n                    }\n                };\n                req.open('post', url);\n                req.setRequestHeader('Content-Type', 'application/json');\n\n                var reportPayload = {stack: stackframes};\n                if (errorMsg !== undefined) {\n                    reportPayload.message = errorMsg;\n                }\n\n                req.send(JSON.stringify(reportPayload));\n            });\n        }\n    };\n}));\n","import * as ST from \"stacktrace-js\";\r\nimport {CategoryLogMessage} from \"../log/category/AbstractCategoryLogger\";\r\nimport {DateFormat, DateFormatEnum, LogLevel} from \"../log/LoggerOptions\";\r\nimport {LogMessage} from \"../log/standard/AbstractLogger\";\r\nimport {Category} from \"../log/category/Category\";\r\n\r\n/**\r\n * Some utilities to format messages.\r\n */\r\nexport class MessageFormatUtils {\r\n\r\n  /**\r\n   * Render given date in given DateFormat and return as String.\r\n   * @param date Date\r\n   * @param dateFormat Format\r\n   * @returns {string} Formatted date\r\n   */\r\n  public static renderDate(date: Date, dateFormat: DateFormat): string {\r\n    const lpad = (value: string, chars: number, padWith: string): string => {\r\n      const howMany = chars - value.length;\r\n      if (howMany > 0) {\r\n        let res: string = \"\";\r\n        for (let i = 0; i < howMany; i++) {\r\n          res += padWith;\r\n        }\r\n        res += value;\r\n        return res;\r\n      }\r\n      return value;\r\n    };\r\n\r\n    const fullYear = (d: Date): string => {\r\n      return lpad(d.getFullYear().toString(), 4, \"0\");\r\n    };\r\n\r\n    const month = (d: Date): string => {\r\n      return lpad((d.getMonth() + 1).toString(), 2, \"0\");\r\n    };\r\n\r\n    const day = (d: Date): string => {\r\n      return lpad(d.getDate().toString(), 2, \"0\");\r\n    };\r\n\r\n    const hours = (d: Date): string => {\r\n      return lpad(d.getHours().toString(), 2, \"0\");\r\n    };\r\n\r\n    const minutes = (d: Date): string => {\r\n      return lpad(d.getMinutes().toString(), 2, \"0\");\r\n    };\r\n\r\n    const seconds = (d: Date): string => {\r\n      return lpad(d.getSeconds().toString(), 2, \"0\");\r\n    };\r\n\r\n    const millis = (d: Date): string => {\r\n      return lpad(d.getMilliseconds().toString(), 3, \"0\");\r\n    };\r\n\r\n    const dateSeparator = dateFormat.dateSeparator;\r\n    let ds: string = \"\";\r\n    switch (dateFormat.formatEnum) {\r\n      case DateFormatEnum.Default:\r\n        // yyyy-mm-dd hh:mm:ss,m\r\n        ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + \" \" +\r\n          hours(date) + \":\" + minutes(date) + \":\" + seconds(date) + \",\" + millis(date);\r\n        break;\r\n      case DateFormatEnum.YearMonthDayTime:\r\n        ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + \" \" +\r\n          hours(date) + \":\" + minutes(date) + \":\" + seconds(date);\r\n        break;\r\n      case DateFormatEnum.YearDayMonthWithFullTime:\r\n        ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + \" \" +\r\n          hours(date) + \":\" + minutes(date) + \":\" + seconds(date) + \",\" + millis(date);\r\n        break;\r\n      case DateFormatEnum.YearDayMonthTime:\r\n        ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + \" \" +\r\n          hours(date) + \":\" + minutes(date) + \":\" + seconds(date);\r\n        break;\r\n      default:\r\n        throw new Error(\"Unsupported date format enum: \" + dateFormat.formatEnum);\r\n    }\r\n    return ds;\r\n  }\r\n\r\n  /**\r\n   * Renders given category log message in default format.\r\n   * @param msg Message to format\r\n   * @param addStack If true adds the stack to the output, otherwise skips it\r\n   * @returns {string} Formatted message\r\n   */\r\n  public static renderDefaultMessage(msg: CategoryLogMessage, addStack: boolean): string {\r\n    let result: string = \"\";\r\n\r\n    const logFormat = msg.logFormat;\r\n    if (logFormat.showTimeStamp) {\r\n      result += MessageFormatUtils.renderDate(msg.date, logFormat.dateFormat) + \" \";\r\n    }\r\n\r\n    result += LogLevel[msg.level].toUpperCase();\r\n    if (msg.isResolvedErrorMessage) {\r\n      result += \" (resolved)\";\r\n    }\r\n    result += \" \";\r\n\r\n    if (logFormat.showCategoryName) {\r\n      result += \"[\";\r\n      msg.categories.forEach((value: Category, idx: number) => {\r\n        if (idx > 0) {\r\n          result += \", \";\r\n        }\r\n        result += value.name;\r\n      });\r\n      result += \"]\";\r\n    }\r\n\r\n    // Get the normal string message first\r\n    let actualStringMsg: string = \"\";\r\n    let dataString: string = \"\";\r\n\r\n    const messageOrLogData = msg.message;\r\n\r\n    if (typeof messageOrLogData === \"string\") {\r\n      actualStringMsg = messageOrLogData;\r\n    }\r\n    else {\r\n      const logData = messageOrLogData;\r\n      actualStringMsg = logData.msg;\r\n\r\n      // We do have data?\r\n      if (logData.data) {\r\n        dataString = \" [data]: \" + (logData.ds ? logData.ds(logData.data) : JSON.stringify(logData.data));\r\n      }\r\n    }\r\n\r\n    result += \" \" + actualStringMsg + \"\" + dataString;\r\n    if (addStack && msg.errorAsStack !== null) {\r\n      result += \"\\n\" + msg.errorAsStack;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Renders given log4j log message in default format.\r\n   * @param msg Message to format\r\n   * @param addStack If true adds the stack to the output, otherwise skips it\r\n   * @returns {string} Formatted message\r\n   */\r\n  public static renderDefaultLog4jMessage(msg: LogMessage, addStack: boolean): string {\r\n    const format = msg.logGroupRule.logFormat;\r\n    let result = \"\";\r\n    if (format.showTimeStamp) {\r\n      result += MessageFormatUtils.renderDate(msg.date, format.dateFormat) + \" \";\r\n    }\r\n\r\n    result += LogLevel[msg.level].toUpperCase() + \" \";\r\n    if (format.showLoggerName) {\r\n      result += \"[\" + msg.loggerName + \"]\";\r\n    }\r\n\r\n    // Get the normal string message first\r\n    let actualStringMsg: string = \"\";\r\n    let dataString: string = \"\";\r\n\r\n    if (typeof msg.message === \"string\") {\r\n      actualStringMsg = msg.message;\r\n    }\r\n    else {\r\n      const logData = msg.message;\r\n      actualStringMsg = logData.msg;\r\n\r\n      // We do have data?\r\n      if (logData.data) {\r\n        dataString = \" [data]: \" + (logData.ds ? logData.ds(logData.data) : JSON.stringify(logData.data));\r\n      }\r\n    }\r\n\r\n    result += \" \" + actualStringMsg + \"\" + dataString;\r\n    if (addStack && msg.errorAsStack !== null) {\r\n      result += \"\\n\" + msg.errorAsStack;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render error as stack\r\n   * @param error Return error as Promise\r\n   * @returns {Promise<string>|Promise} Promise for stack\r\n   */\r\n  public static renderError(error: Error): Promise<string> {\r\n    let result = error.name + \": \" + error.message + \"\\n@\";\r\n    return new Promise<string>((resolve: any) => {\r\n\r\n      // This one has a promise too\r\n      ST.fromError(error, {offline: true}).then((frames: ST.StackFrame[]) => {\r\n        const stackStr = (frames.map((frame: ST.StackFrame) => {\r\n          return frame.toString();\r\n        }) ).join(\"\\n  \");\r\n\r\n        result += \"\\n\" + stackStr;\r\n\r\n        // This resolves our returned promise\r\n        resolve(result);\r\n      }).catch(() => {\r\n        result = \"Unexpected error object was passed in. \";\r\n        try {\r\n          result += \"Could not resolve it, stringified object: \" + JSON.stringify(error);\r\n        }\r\n        catch (e) {\r\n          // Cannot stringify can only tell something was wrong.\r\n          result += \"Could not resolve it or stringify it.\";\r\n        }\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import {LogLevel} from \"../LoggerOptions\";\r\nimport {ErrorType, Logger, MessageType} from \"./Logger\";\r\nimport {LinkedList} from \"../../utils/DataStructures\";\r\nimport {MessageFormatUtils} from \"../../utils/MessageUtils\";\r\nimport {LogData} from \"../LogData\";\r\nimport {LogGroupRule} from \"./LogGroupRule\";\r\nimport {LogGroupRuntimeSettings} from \"./LogGroupRuntimeSettings\";\r\n\r\n/**\r\n * Log message, providing all data for a single message.\r\n */\r\nexport interface LogMessage {\r\n\r\n  /**\r\n   * Name of the logger.\r\n   */\r\n  readonly loggerName: string;\r\n\r\n  /**\r\n   * Original, unformatted message or LogData.\r\n   */\r\n  readonly message: string | LogData;\r\n\r\n  /**\r\n   * Returns the resolved stack (based on error).\r\n   * Available only when error is present, null otherwise.\r\n   */\r\n  readonly errorAsStack: string | null;\r\n\r\n  /**\r\n   * Error when present, or null.\r\n   */\r\n  readonly error: Error | null;\r\n\r\n  /**\r\n   * Which LogGroupRule matched for this message.\r\n   */\r\n  readonly logGroupRule: LogGroupRule;\r\n\r\n  /**\r\n   * Time for message.\r\n   */\r\n  readonly date: Date;\r\n\r\n  /**\r\n   * LogLevel used\r\n   */\r\n  readonly level: LogLevel;\r\n\r\n  /**\r\n   * True if message represents LogData (false for a string message).\r\n   */\r\n  readonly isMessageLogData: boolean;\r\n\r\n  /**\r\n   * Always retrieves the message, from either the string directly\r\n   * or in case of LogData from LogData itself.\r\n   */\r\n  readonly messageAsString: string;\r\n\r\n  /**\r\n   * If present returns LogData, otherwise null.\r\n   */\r\n  readonly logData: LogData | null;\r\n}\r\n\r\ninterface LogMessageInternal extends LogMessage {\r\n\r\n  /**\r\n   * True if the message is done (ready), if false\r\n   * we wait for a promise.\r\n   */\r\n  ready: boolean;\r\n}\r\n\r\nclass LogMessageInternalImpl implements LogMessageInternal {\r\n\r\n  private _loggerName: string;\r\n  private _message: string | LogData;\r\n  private _errorAsStack: string | null = null;\r\n  private _error: Error | null = null;\r\n  private _logGroupRule: LogGroupRule;\r\n  private _date: Date;\r\n  private _level: LogLevel;\r\n  private _ready: boolean;\r\n\r\n  constructor(loggerName: string, message: string | LogData, errorAsStack: string | null, error: Error | null, logGroupRule: LogGroupRule, date: Date, level: LogLevel, ready: boolean) {\r\n    this._loggerName = loggerName;\r\n    this._message = message;\r\n    this._errorAsStack = errorAsStack;\r\n    this._error = error;\r\n    this._logGroupRule = logGroupRule;\r\n    this._date = date;\r\n    this._level = level;\r\n    this._ready = ready;\r\n  }\r\n\r\n  get loggerName(): string {\r\n    return this._loggerName;\r\n  }\r\n\r\n  get message(): string | LogData {\r\n    return this._message;\r\n  }\r\n\r\n  set message(value: string | LogData) {\r\n    this._message = value;\r\n  }\r\n\r\n  get errorAsStack(): string | any {\r\n    return this._errorAsStack;\r\n  }\r\n\r\n  set errorAsStack(value: string | any) {\r\n    this._errorAsStack = value;\r\n  }\r\n\r\n  get error(): Error | any {\r\n    return this._error;\r\n  }\r\n\r\n  set error(value: Error | any) {\r\n    this._error = value;\r\n  }\r\n\r\n  get logGroupRule(): LogGroupRule {\r\n    return this._logGroupRule;\r\n  }\r\n\r\n  set logGroupRule(value: LogGroupRule) {\r\n    this._logGroupRule = value;\r\n  }\r\n\r\n  get date(): Date {\r\n    return this._date;\r\n  }\r\n\r\n  set date(value: Date) {\r\n    this._date = value;\r\n  }\r\n\r\n  get level(): LogLevel {\r\n    return this._level;\r\n  }\r\n\r\n  set level(value: LogLevel) {\r\n    this._level = value;\r\n  }\r\n\r\n  get isMessageLogData(): boolean {\r\n    return typeof(this._message) !== \"string\";\r\n  }\r\n\r\n  get ready(): boolean {\r\n    return this._ready;\r\n  }\r\n\r\n  set ready(value: boolean) {\r\n    this._ready = value;\r\n  }\r\n\r\n  get messageAsString(): string {\r\n    if (typeof(this._message) === \"string\") {\r\n      return this._message;\r\n    }\r\n    return this._message.msg;\r\n  }\r\n\r\n  get logData(): LogData | null {\r\n    let result: LogData | null = null;\r\n    if (typeof(this._message) !== \"string\") {\r\n      result = this.message as LogData;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * Abstract base logger, extend to easily implement a custom logger that\r\n * logs wherever you want. You only need to implement doLog(msg: LogMessage) and\r\n * log that somewhere (it will contain format and everything else).\r\n */\r\nexport abstract class AbstractLogger implements Logger {\r\n\r\n  private _logGroupRuntimeSettings: LogGroupRuntimeSettings;\r\n  private _allMessages: LinkedList<LogMessageInternal> = new LinkedList<LogMessageInternal>();\r\n\r\n  protected _name: string;\r\n  protected _open: boolean = true;\r\n\r\n  constructor(name: string, logGroupRuntimeSettings: LogGroupRuntimeSettings) {\r\n    this._name = name;\r\n    this._logGroupRuntimeSettings = logGroupRuntimeSettings;\r\n  }\r\n\r\n  get name(): string {\r\n    return this._name;\r\n  }\r\n\r\n  public finest(msg: MessageType, error: ErrorType = null): void {\r\n    this._log(LogLevel.Finest, msg, error);\r\n  }\r\n\r\n  public finer(msg: MessageType, error: ErrorType = null): void {\r\n    this._log(LogLevel.Finer, msg, error);\r\n  }\r\n\r\n  public fine(msg: MessageType, error: ErrorType = null): void {\r\n    this._log(LogLevel.Fine, msg, error);\r\n  }\r\n\r\n  public config(msg: MessageType, error: ErrorType = null): void {\r\n    this._log(LogLevel.Config, msg, error);\r\n  }\r\n\r\n  public info(msg: MessageType, error: ErrorType = null): void {\r\n    this._log(LogLevel.Info, msg, error);\r\n  }\r\n\r\n  public warning(msg: MessageType, error: ErrorType = null): void {\r\n    this._log(LogLevel.Warning, msg, error);\r\n  }\r\n\r\n  public severe(msg: MessageType, error: ErrorType = null): void {\r\n    this._log(LogLevel.Severe, msg, error);\r\n  }\r\n\r\n  public isFinestEnabled(): boolean {\r\n    return this._logGroupRuntimeSettings.level === LogLevel.Finest;\r\n  }\r\n\r\n  public isFinerEnabled(): boolean {\r\n    return this._logGroupRuntimeSettings.level <= LogLevel.Finer;\r\n  }\r\n\r\n  public isFineEnabled(): boolean {\r\n    return this._logGroupRuntimeSettings.level <= LogLevel.Fine;\r\n  }\r\n\r\n  public isConfigEnabled(): boolean {\r\n    return this._logGroupRuntimeSettings.level <= LogLevel.Config;\r\n  }\r\n\r\n  public isInfoEnabled(): boolean {\r\n    return this._logGroupRuntimeSettings.level <= LogLevel.Info;\r\n  }\r\n\r\n  public isWarningEnabled(): boolean {\r\n    return this._logGroupRuntimeSettings.level <= LogLevel.Warning;\r\n  }\r\n\r\n  public isSevereEnabled(): boolean {\r\n    return this._logGroupRuntimeSettings.level <= LogLevel.Severe;\r\n  }\r\n\r\n  public getLogLevel(): LogLevel {\r\n    return this._logGroupRuntimeSettings.level;\r\n  }\r\n\r\n  public isOpen(): boolean {\r\n    return this._open;\r\n  }\r\n\r\n  public close(): void {\r\n    this._open = false;\r\n    this._allMessages.clear();\r\n  }\r\n\r\n  protected createDefaultLogMessage(msg: LogMessage): string {\r\n    return MessageFormatUtils.renderDefaultLog4jMessage(msg, true);\r\n  }\r\n\r\n  /**\r\n   * Return optional message formatter. All LoggerTypes (except custom) will see if\r\n   * they have this, and if so use it to log.\r\n   * @returns {((message:LogMessage)=>string)|null}\r\n   */\r\n  protected _getMessageFormatter(): ((message: LogMessage) => string) | null {\r\n    return this._logGroupRuntimeSettings.formatterLogMessage;\r\n  }\r\n\r\n  protected abstract doLog(msg: LogMessage): void;\r\n\r\n  private _log(level: LogLevel, msg: MessageType, error: ErrorType = null): void {\r\n    if (this._open && this._logGroupRuntimeSettings.level <= level) {\r\n      const functionMessage = (): string | LogData => {\r\n        if (typeof msg === \"function\") {\r\n          return msg();\r\n        }\r\n        return msg;\r\n      };\r\n      const functionError = (): Error | null => {\r\n        if (typeof error === \"function\") {\r\n          return error();\r\n        }\r\n        return error;\r\n      };\r\n      this._allMessages.addTail(this.createMessage(level, functionMessage, functionError, new Date()));\r\n      this.processMessages();\r\n    }\r\n  }\r\n\r\n  private createMessage(level: LogLevel, msg: () => string | LogData, error: () => Error | null, date: Date): LogMessageInternal {\r\n    const errorResult = error();\r\n    if (errorResult !== null) {\r\n      const message = new LogMessageInternalImpl(this._name, msg(), null, errorResult, this._logGroupRuntimeSettings.logGroupRule, date, level, false);\r\n      MessageFormatUtils.renderError(errorResult).then((stack: string) => {\r\n        message.errorAsStack = stack;\r\n        message.ready = true;\r\n        this.processMessages();\r\n      }).catch(() => {\r\n        message.errorAsStack = \"<UNKNOWN> unable to get stack.\";\r\n        message.ready = true;\r\n        this.processMessages();\r\n      });\r\n      return message;\r\n    }\r\n    return new LogMessageInternalImpl(this._name, msg(), null, errorResult, this._logGroupRuntimeSettings.logGroupRule, date, level, true);\r\n  }\r\n\r\n  private processMessages(): void {\r\n    // Basically we wait until errors are resolved (those messages\r\n    // may not be ready).\r\n    const msgs = this._allMessages;\r\n    if (msgs.getSize() > 0) {\r\n      do {\r\n        const msg = msgs.getHead();\r\n        if (msg != null) {\r\n          if (!msg.ready) {\r\n            break;\r\n          }\r\n          msgs.removeHead();\r\n          // This can never be null normally, but strict null checking ...\r\n          if (msg.message !== null) {\r\n            this.doLog(msg);\r\n          }\r\n        }\r\n      }\r\n      while (msgs.getSize() > 0);\r\n    }\r\n  }\r\n}\r\n","import {AbstractLogger, LogMessage} from \"./AbstractLogger\";\r\nimport {LogLevel} from \"../LoggerOptions\";\r\nimport {LogGroupRuntimeSettings} from \"./LogGroupRuntimeSettings\";\r\n\r\n/**\r\n * Simple logger, that logs to the console. If the console is unavailable will throw exception.\r\n */\r\nexport class ConsoleLoggerImpl extends AbstractLogger {\r\n\r\n  constructor(name: string, logGroupRuntimeSettings: LogGroupRuntimeSettings) {\r\n    super(name, logGroupRuntimeSettings);\r\n  }\r\n\r\n  protected doLog(message: LogMessage): void {\r\n    if (console !== undefined) {\r\n      let logged = false;\r\n      const logLevel = message.level;\r\n\r\n      const messageFormatter = this._getMessageFormatter();\r\n      let msg: string;\r\n      if (messageFormatter === null) {\r\n        msg = this.createDefaultLogMessage(message);\r\n      }\r\n      else {\r\n        msg = messageFormatter(message);\r\n      }\r\n\r\n      /* tslint:disable:no-console */\r\n      switch (logLevel) {\r\n        case LogLevel.Finest:\r\n          // Do not try trace we don't want a stack\r\n          break;\r\n        case LogLevel.Finer:\r\n          // Do not try trace we don't want a stack\r\n          break;\r\n        case LogLevel.Fine:\r\n          // Don't try, too much differences of consoles.\r\n          break;\r\n        case LogLevel.Config:\r\n          if (console.info) {\r\n            console.info(\"CONFIG \" + msg);\r\n            logged = true;\r\n          }\r\n          break;\r\n        case LogLevel.Info:\r\n          if (console.info) {\r\n            console.info(msg);\r\n            logged = true;\r\n          }\r\n          break;\r\n        case LogLevel.Warning:\r\n          if (console.warn) {\r\n            console.warn(msg);\r\n            logged = true;\r\n          }\r\n          break;\r\n        case LogLevel.Severe:\r\n          if (console.error) {\r\n            console.error(msg);\r\n            logged = true;\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(\"Log level not supported: \" + logLevel);\r\n      }\r\n      if (!logged) {\r\n        console.log(msg);\r\n      }\r\n      /* tslint:enable:no-console */\r\n    }\r\n    else {\r\n      throw new Error(\"Console is not defined, cannot log msg: \" + message.message);\r\n    }\r\n  }\r\n}\r\n","import {AbstractLogger, LogMessage} from \"./AbstractLogger\";\r\nimport {LogGroupRuntimeSettings} from \"./LogGroupRuntimeSettings\";\r\n\r\n/**\r\n * Logger which buffers all messages, use with care due to possible high memory footprint.\r\n * Can be convenient in some cases. Call toString() for full output, or cast to this class\r\n * and call getMessages() to do something with it yourself.\r\n */\r\nexport class MessageBufferLoggerImpl extends AbstractLogger {\r\n\r\n  private messages: string[] = [];\r\n\r\n  constructor(name: string, logGroupRuntimeSettings: LogGroupRuntimeSettings) {\r\n    super(name, logGroupRuntimeSettings);\r\n  }\r\n\r\n  public close(): void {\r\n    this.messages = [];\r\n    super.close();\r\n  }\r\n\r\n  public getMessages(): string[] {\r\n    return this.messages;\r\n  }\r\n\r\n  public toString(): string {\r\n    return this.messages.map((msg) => {\r\n      return msg;\r\n    }).join(\"\\n\");\r\n  }\r\n\r\n  protected doLog(message: LogMessage): void {\r\n    const messageFormatter = this._getMessageFormatter();\r\n    let fullMsg: string;\r\n    if (messageFormatter === null) {\r\n      fullMsg = this.createDefaultLogMessage(message);\r\n    }\r\n    else {\r\n      fullMsg = messageFormatter(message);\r\n    }\r\n    this.messages.push(fullMsg);\r\n  }\r\n}\r\n","import {Logger} from \"./Logger\";\r\nimport {LogGroupRule} from \"./LogGroupRule\";\r\nimport {DateFormat, LogFormat, LoggerType, LogLevel} from \"../LoggerOptions\";\r\nimport {LogMessage} from \"./AbstractLogger\";\r\n\r\n/**\r\n * Represents the runtime settings for a LogGroup (LogGroupRule).\r\n */\r\nexport class LogGroupRuntimeSettings {\r\n\r\n  // Store the original\r\n  private _logGroupRule: LogGroupRule;\r\n\r\n  // Store current runtime\r\n  private _level: LogLevel;\r\n  private _loggerType: LoggerType;\r\n  private _logFormat: LogFormat;\r\n  private _callBackLogger: ((name: string, settings: LogGroupRuntimeSettings) => Logger) | null;\r\n  private _formatterLogMessage: ((message: LogMessage) => string) | null = null;\r\n\r\n  constructor(logGroupRule: LogGroupRule) {\r\n    this._logGroupRule = logGroupRule;\r\n    this._level = logGroupRule.level;\r\n    this._loggerType = logGroupRule.loggerType;\r\n    this._logFormat = new LogFormat(new DateFormat(logGroupRule.logFormat.dateFormat.formatEnum, logGroupRule.logFormat.dateFormat.dateSeparator),\r\n      logGroupRule.logFormat.showTimeStamp, logGroupRule.logFormat.showLoggerName);\r\n    this._callBackLogger = logGroupRule.callBackLogger;\r\n    this._formatterLogMessage = logGroupRule.formatterLogMessage;\r\n  }\r\n\r\n  /**\r\n   * Returns original LogGroupRule (so not runtime settings!)\r\n   * @return {LogGroupRule}\r\n   */\r\n  get logGroupRule(): LogGroupRule {\r\n    return this._logGroupRule;\r\n  }\r\n\r\n  get level(): LogLevel {\r\n    return this._level;\r\n  }\r\n\r\n  set level(value: LogLevel) {\r\n    this._level = value;\r\n  }\r\n\r\n  get loggerType(): LoggerType {\r\n    return this._loggerType;\r\n  }\r\n\r\n  set loggerType(value: LoggerType) {\r\n    this._loggerType = value;\r\n  }\r\n\r\n  get logFormat(): LogFormat {\r\n    return this._logFormat;\r\n  }\r\n\r\n  set logFormat(value: LogFormat) {\r\n    this._logFormat = value;\r\n  }\r\n\r\n  get callBackLogger(): ((name: string, settings: LogGroupRuntimeSettings) => Logger) | null {\r\n    return this._callBackLogger;\r\n  }\r\n\r\n  set callBackLogger(value: ((name: string, settings: LogGroupRuntimeSettings) => Logger) | null) {\r\n    this._callBackLogger = value;\r\n  }\r\n\r\n  get formatterLogMessage(): ((message: LogMessage) => string) | null {\r\n    return this._formatterLogMessage;\r\n  }\r\n\r\n  set formatterLogMessage(value: ((message: LogMessage) => string) | null) {\r\n    this._formatterLogMessage = value;\r\n  }\r\n}\r\n","import {SimpleMap} from \"../../utils/DataStructures\";\r\nimport {LoggerType} from \"../LoggerOptions\";\r\nimport {Logger} from \"./Logger\";\r\nimport {LoggerFactory} from \"./LoggerFactory\";\r\nimport {LoggerFactoryRuntimeSettings} from \"./LoggerFactoryRuntimeSettings\";\r\nimport {ConsoleLoggerImpl} from \"./ConsoleLoggerImpl\";\r\nimport {MessageBufferLoggerImpl} from \"./MessageBufferLoggerImpl\";\r\nimport {AbstractLogger} from \"./AbstractLogger\";\r\nimport {LoggerFactoryOptions} from \"./LoggerFactoryOptions\";\r\nimport {LogGroupRuntimeSettings} from \"./LogGroupRuntimeSettings\";\r\n\r\nexport class LoggerFactoryImpl implements LoggerFactory, LoggerFactoryRuntimeSettings {\r\n\r\n  private _name: string;\r\n\r\n  // Initialized by constructor by calling this.configure(..)\r\n  private _options!: LoggerFactoryOptions;\r\n  private _loggers: SimpleMap<Logger> = new SimpleMap<Logger>();\r\n\r\n  private _logGroupRuntimeSettingsIndexed: LogGroupRuntimeSettings[] = [];\r\n  private _loggerToLogGroupSettings: SimpleMap<LogGroupRuntimeSettings> = new SimpleMap<LogGroupRuntimeSettings>();\r\n\r\n  constructor(name: string, options: LoggerFactoryOptions) {\r\n    this._name = name;\r\n    this.configure(options);\r\n  }\r\n\r\n  public configure(options: LoggerFactoryOptions): void {\r\n    this._options = options;\r\n\r\n    // Close any current open loggers.\r\n    this.closeLoggers();\r\n    this._loggerToLogGroupSettings.clear();\r\n    this._logGroupRuntimeSettingsIndexed = [];\r\n\r\n    const logGroupRules = this._options.logGroupRules;\r\n    /* tslint:disable:prefer-for-of */\r\n    for (let i = 0; i < logGroupRules.length; i++) {\r\n      this._logGroupRuntimeSettingsIndexed.push(new LogGroupRuntimeSettings(logGroupRules[i]));\r\n    }\r\n    /* tslint:enable:prefer-for-of */\r\n  }\r\n\r\n  public getLogger(named: string): Logger {\r\n    if (!this._options.enabled) {\r\n      throw new Error(\"LoggerFactory is not enabled, please check your options passed in\");\r\n    }\r\n\r\n    let logger = this._loggers.get(named);\r\n    if (typeof logger !== \"undefined\") {\r\n      return logger;\r\n    }\r\n\r\n    // Initialize logger with appropriate level\r\n    logger = this.loadLogger(named);\r\n    this._loggers.put(named, logger);\r\n    return logger;\r\n  }\r\n\r\n  public isEnabled(): boolean {\r\n    return this._options.enabled;\r\n  }\r\n\r\n  public closeLoggers(): void {\r\n    this._loggers.forEachValue((logger) => {\r\n      // We can only close if AbstractLogger is used (our loggers, but user loggers may not extend it, even though unlikely).\r\n      if (logger instanceof AbstractLogger) {\r\n        logger.close();\r\n      }\r\n    });\r\n    this._loggers.clear();\r\n  }\r\n\r\n  public getName(): string {\r\n    return this._name;\r\n  }\r\n\r\n  public getLogGroupRuntimeSettingsByIndex(idx: number): LogGroupRuntimeSettings | null {\r\n    if (idx >= 0 && idx < this._logGroupRuntimeSettingsIndexed.length) {\r\n      return this._logGroupRuntimeSettingsIndexed[idx];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public getLogGroupRuntimeSettingsByLoggerName(nameLogger: string): LogGroupRuntimeSettings | null {\r\n    const result = this._loggerToLogGroupSettings.get(nameLogger);\r\n    if (typeof result === \"undefined\") {\r\n      return null;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public getLogGroupRuntimeSettings(): LogGroupRuntimeSettings[] {\r\n    return this._logGroupRuntimeSettingsIndexed.slice(0);\r\n  }\r\n\r\n  private loadLogger(named: string): Logger {\r\n    const logGroupRules = this._options.logGroupRules;\r\n\r\n    for (let i = 0; i < logGroupRules.length; i++) {\r\n      const logGroupRule = logGroupRules[i];\r\n      if (logGroupRule.regExp.test(named)) {\r\n        const logGroupRuntimeSettings = this._logGroupRuntimeSettingsIndexed[i];\r\n\r\n        let logger: Logger;\r\n        switch (logGroupRule.loggerType) {\r\n          case LoggerType.Console:\r\n            logger = new ConsoleLoggerImpl(named, logGroupRuntimeSettings);\r\n            break;\r\n          case LoggerType.MessageBuffer:\r\n            logger = new MessageBufferLoggerImpl(named, logGroupRuntimeSettings);\r\n            break;\r\n          case LoggerType.Custom:\r\n            if (logGroupRule.callBackLogger != null) {\r\n              logger = logGroupRule.callBackLogger(named, logGroupRuntimeSettings);\r\n            }\r\n            else {\r\n              throw new Error(\"Cannot create a custom logger, custom callback is null\");\r\n            }\r\n            break;\r\n          default:\r\n            throw new Error(\"Cannot create a Logger for LoggerType: \" + logGroupRule.loggerType);\r\n        }\r\n\r\n        // For a new logger map it by its name\r\n        this._loggerToLogGroupSettings.put(named, logGroupRuntimeSettings);\r\n        return logger;\r\n      }\r\n    }\r\n    throw new Error(\"Failed to find a match to create a Logger for: \" + named);\r\n  }\r\n\r\n}\r\n","import {LinkedList} from \"../../utils/DataStructures\";\r\nimport {MessageFormatUtils} from \"../../utils/MessageUtils\";\r\nimport {LogData} from \"../LogData\";\r\nimport {CategoryLogFormat, LogLevel} from \"../LoggerOptions\";\r\nimport {ErrorType, MessageType} from \"../standard/Logger\";\r\nimport {CategoryLogger} from \"./CategoryLogger\";\r\nimport {Category} from \"./Category\";\r\nimport {RuntimeSettings} from \"./RuntimeSettings\";\r\n\r\n/**\r\n * Contains information about a single log message.\r\n */\r\nexport interface CategoryLogMessage {\r\n\r\n  readonly message: string | LogData;\r\n\r\n  /**\r\n   * Returns the resolved stack (based on error).\r\n   * Available only when error is present.\r\n   */\r\n  readonly errorAsStack: string | null;\r\n\r\n  readonly error: Error | null;\r\n\r\n  readonly categories: Category[];\r\n\r\n  readonly date: Date;\r\n\r\n  readonly level: LogLevel;\r\n\r\n  readonly logFormat: CategoryLogFormat;\r\n\r\n  readonly isResolvedErrorMessage: boolean;\r\n\r\n  /**\r\n   * True if message represents LogData (false for a string message).\r\n   */\r\n  readonly isMessageLogData: boolean;\r\n\r\n  /**\r\n   * Always retrieves the message, from either the string directly\r\n   * or in case of LogData from LogData itself.\r\n   */\r\n  readonly messageAsString: string;\r\n\r\n  /**\r\n   * If present returns LogData, otherwise null.\r\n   */\r\n  readonly logData: LogData | null;\r\n}\r\n\r\nclass CategoryLogMessageImpl implements CategoryLogMessage {\r\n\r\n  private _message: string | LogData;\r\n  private _error: Error | null;\r\n  private _categories: Category[];\r\n  private _date: Date;\r\n  private _level: LogLevel;\r\n  private _logFormat: CategoryLogFormat;\r\n  private _ready: boolean;\r\n\r\n  private _resolvedErrorMessage: boolean = false;\r\n  private _errorAsStack: string | null = null;\r\n\r\n  constructor(message: string | LogData, error: Error | null, categories: Category[], date: Date, level: LogLevel, logFormat: CategoryLogFormat, ready: boolean) {\r\n    this._message = message;\r\n    this._error = error;\r\n    this._categories = categories;\r\n    this._date = date;\r\n    this._level = level;\r\n    this._logFormat = logFormat;\r\n    this._ready = ready;\r\n  }\r\n\r\n  get message(): string | LogData {\r\n    return this._message;\r\n  }\r\n\r\n  get error(): Error | null {\r\n    return this._error;\r\n  }\r\n\r\n  get categories(): Category[] {\r\n    return this._categories;\r\n  }\r\n\r\n  get date(): Date {\r\n    return this._date;\r\n  }\r\n\r\n  get level(): LogLevel {\r\n    return this._level;\r\n  }\r\n\r\n  get logFormat(): CategoryLogFormat {\r\n    return this._logFormat;\r\n  }\r\n\r\n  get isMessageLogData(): boolean {\r\n    return typeof(this._message) !== \"string\";\r\n  }\r\n\r\n  get messageAsString(): string {\r\n    if (typeof(this._message) === \"string\") {\r\n      return this._message;\r\n    }\r\n    return this._message.msg;\r\n  }\r\n\r\n  get logData(): LogData | null {\r\n    let result: LogData | null = null;\r\n    if (typeof(this._message) !== \"string\") {\r\n      result = this.message as LogData;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  get isResolvedErrorMessage(): boolean {\r\n    return this._resolvedErrorMessage;\r\n  }\r\n\r\n  get errorAsStack(): string | null {\r\n    return this._errorAsStack;\r\n  }\r\n\r\n  set errorAsStack(stack: string | null) {\r\n    this._errorAsStack = stack;\r\n  }\r\n\r\n  public isReady(): boolean {\r\n    return this._ready;\r\n  }\r\n\r\n  public setReady(value: boolean): void {\r\n    this._ready = value;\r\n  }\r\n\r\n  get resolvedErrorMessage(): boolean {\r\n    return this._resolvedErrorMessage;\r\n  }\r\n\r\n  set resolvedErrorMessage(value: boolean) {\r\n    this._resolvedErrorMessage = value;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Abstract category logger, use as your base class for new type of loggers (it\r\n * saves you a lot of work) and override doLog(CategoryLogMessage). The message argument\r\n * provides full access to anything related to the logging event.\r\n * If you just want the standard line of logging, call: this.createDefaultLogMessage(msg) on\r\n * this class which will return you the formatted log message as string (e.g. the\r\n * default loggers all use this).\r\n */\r\nexport abstract class AbstractCategoryLogger implements CategoryLogger {\r\n\r\n  private rootCategory: Category;\r\n  private runtimeSettings: RuntimeSettings;\r\n\r\n  private allMessages: LinkedList<CategoryLogMessageImpl> = new LinkedList<CategoryLogMessageImpl>();\r\n\r\n  constructor(rootCategory: Category, runtimeSettings: RuntimeSettings) {\r\n    this.rootCategory = rootCategory;\r\n    this.runtimeSettings = runtimeSettings;\r\n  }\r\n\r\n  public finest(msg: MessageType, ...categories: Category[]): void {\r\n    this._log(LogLevel.Finest, msg, null, false, ...categories);\r\n  }\r\n\r\n  public finer(msg: MessageType, ...categories: Category[]): void {\r\n    this._log(LogLevel.Finer, msg, null, false, ...categories);\r\n  }\r\n\r\n  public fine(msg: MessageType, ...categories: Category[]): void {\r\n    this._log(LogLevel.Fine, msg, null, false, ...categories);\r\n  }\r\n\r\n  public config(msg: MessageType, ...categories: Category[]): void {\r\n    this._log(LogLevel.Config, msg, null, false, ...categories);\r\n  }\r\n\r\n  public info(msg: MessageType, ...categories: Category[]): void {\r\n    this._log(LogLevel.Info, msg, null, false, ...categories);\r\n  }\r\n\r\n  public warning(msg: MessageType, error: ErrorType, ...categories: Category[]): void {\r\n    this._log(LogLevel.Warning, msg, error, false, ...categories);\r\n  }\r\n\r\n  public severe(msg: MessageType, error: ErrorType, ...categories: Category[]): void {\r\n    this._log(LogLevel.Severe, msg, error, false, ...categories);\r\n  }\r\n\r\n  public resolved(msg: MessageType, error: ErrorType, ...categories: Category[]): void {\r\n    this._log(LogLevel.Severe, msg, error, true, ...categories);\r\n  }\r\n\r\n  public log(level: LogLevel, msg: MessageType, error: ErrorType, ...categories: Category[]): void {\r\n    this._log(level, msg, error, false, ...categories);\r\n  }\r\n\r\n  protected getRootCategory(): Category {\r\n    return this.rootCategory;\r\n  }\r\n\r\n  /**\r\n   * Implement this method in your custom logger\r\n   * @param msg Message\r\n   */\r\n  protected abstract doLog(msg: CategoryLogMessage): void;\r\n\r\n  protected createDefaultLogMessage(msg: CategoryLogMessage): string {\r\n    return MessageFormatUtils.renderDefaultMessage(msg, true);\r\n  }\r\n\r\n  /**\r\n   * Return optional message formatter. All LoggerTypes (except custom) will see if\r\n   * they have this, and if so use it to log.\r\n   * @returns {((message:CategoryLogMessage)=>string)|null}\r\n   */\r\n  protected _getMessageFormatter(): ((message: CategoryLogMessage) => string) | null {\r\n    const categorySettings = this.runtimeSettings.getCategorySettings(this.rootCategory);\r\n    // Should not happen but make ts happy\r\n    if (categorySettings === null) {\r\n      throw new Error(\"Did not find CategorySettings for rootCategory: \" + this.rootCategory.name);\r\n    }\r\n    return categorySettings.formatterLogMessage;\r\n  }\r\n\r\n  private _log(level: LogLevel, msg: MessageType, error: ErrorType = null, resolved: boolean = false, ...categories: Category[]): void {\r\n    // this._logInternal(level, () => msg, () => error, resolved, ...categories);\r\n    const functionMessage = (): string | LogData => {\r\n      if (typeof msg === \"function\") {\r\n        return msg();\r\n      }\r\n      return msg;\r\n    };\r\n    const functionError = (): Error | null => {\r\n      if (typeof error === \"function\") {\r\n        return error();\r\n      }\r\n      return error;\r\n    };\r\n    this._logInternal(level, functionMessage, functionError, resolved, ...categories);\r\n  }\r\n\r\n  private _logInternal(level: LogLevel, msg: () => string | LogData, error: () => Error | null, resolved: boolean, ...categories: Category[]): void {\r\n    let logCategories: Category[] = [this.rootCategory];\r\n\r\n    // Log root category by default if none present\r\n    if (typeof categories !== \"undefined\" && categories.length > 0) {\r\n      logCategories = logCategories.concat(categories.filter((c) => c !== this.rootCategory));\r\n    }\r\n\r\n    // Get the runtime levels for given categories. If their level is lower than given level, we log.\r\n    // In addition we pass along which category/categories we log this statement for.\r\n    for (let i = 0; i < logCategories.length; i++) {\r\n      const category = logCategories[i];\r\n      if (category === null) {\r\n        throw new Error(\"Cannot have a null element within categories, at index=\" + i);\r\n      }\r\n      const settings = this.runtimeSettings.getCategorySettings(category);\r\n      if (settings === null) {\r\n        throw new Error(\"Category with path: \" + category.getCategoryPath() + \" is not registered with this logger, maybe \" +\r\n          \"you registered it with a different root logger?\");\r\n      }\r\n\r\n      if (settings.logLevel <= level) {\r\n        const actualError = error !== null ? error() : null;\r\n        if (actualError === null) {\r\n          const logMessage = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, true);\r\n          logMessage.resolvedErrorMessage = resolved;\r\n          this.allMessages.addTail(logMessage);\r\n          this.processMessages();\r\n        }\r\n        else {\r\n          const logMessage = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, false);\r\n          logMessage.resolvedErrorMessage = resolved;\r\n          this.allMessages.addTail(logMessage);\r\n          MessageFormatUtils.renderError(actualError).then((stack: string) => {\r\n            logMessage.errorAsStack = stack;\r\n            logMessage.setReady(true);\r\n            this.processMessages();\r\n          }).catch(() => {\r\n            logMessage.errorAsStack = \"<UNKNOWN> unable to get stack.\";\r\n            logMessage.setReady(true);\r\n            this.processMessages();\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  private processMessages(): void {\r\n    // Basically we wait until errors are resolved (those messages\r\n    // may not be ready).\r\n    const msgs = this.allMessages;\r\n    if (msgs.getSize() > 0) {\r\n      do {\r\n        const msg = msgs.getHead();\r\n        if (msg != null) {\r\n          if (!msg.isReady()) {\r\n            break;\r\n          }\r\n          msgs.removeHead();\r\n          this.doLog(msg);\r\n        }\r\n      }\r\n      while (msgs.getSize() > 0);\r\n    }\r\n  }\r\n\r\n}\r\n","import {LogLevel} from \"../LoggerOptions\";\r\nimport {AbstractCategoryLogger, CategoryLogMessage} from \"./AbstractCategoryLogger\";\r\nimport {Category} from \"./Category\";\r\nimport {RuntimeSettings} from \"./RuntimeSettings\";\r\n\r\n/**\r\n * Simple logger, that logs to the console. If the console is unavailable will throw an exception.\r\n */\r\nexport class CategoryConsoleLoggerImpl extends AbstractCategoryLogger {\r\n\r\n  constructor(rootCategory: Category, runtimeSettings: RuntimeSettings) {\r\n    super(rootCategory, runtimeSettings);\r\n  }\r\n\r\n  protected doLog(msg: CategoryLogMessage): void {\r\n    if (console !== undefined) {\r\n      const messageFormatter = this._getMessageFormatter();\r\n      let fullMsg: string;\r\n      if (messageFormatter === null) {\r\n        fullMsg = this.createDefaultLogMessage(msg);\r\n      }\r\n      else {\r\n        fullMsg = messageFormatter(msg);\r\n      }\r\n\r\n      let logged = false;\r\n\r\n      /* tslint:disable:no-console */\r\n      switch (msg.level) {\r\n        case LogLevel.Finest:\r\n          // Don't try trace we don't want stacks\r\n          break;\r\n        case LogLevel.Finer:\r\n          // Don't try trace we don't want stacks\r\n          break;\r\n        case LogLevel.Fine:\r\n          // Don't try, too much differences of consoles.\r\n          break;\r\n        case LogLevel.Info:\r\n        case LogLevel.Config:\r\n          if (console.info) {\r\n            console.info(\"CONFIG \" + fullMsg);\r\n            logged = true;\r\n          }\r\n          break;\r\n          if (console.info) {\r\n            console.info(fullMsg);\r\n            logged = true;\r\n          }\r\n          break;\r\n        case LogLevel.Warning:\r\n          if (console.warn) {\r\n            console.warn(fullMsg);\r\n            logged = true;\r\n          }\r\n          break;\r\n        case LogLevel.Severe:\r\n          if (console.error) {\r\n            console.error(fullMsg);\r\n            logged = true;\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(\"Unsupported level: \" + msg.level);\r\n      }\r\n\r\n      if (!logged) {\r\n        console.log(fullMsg);\r\n      }\r\n      /* tslint:enable:no-console */\r\n    }\r\n    else {\r\n      throw new Error(\"Console is not defined, cannot log msg: \" + msg.messageAsString);\r\n    }\r\n  }\r\n}\r\n","import {LogLevel} from \"../LoggerOptions\";\r\nimport {MessageType} from \"../standard/Logger\";\r\nimport {CategoryLogger} from \"./CategoryLogger\";\r\nimport {Category} from \"./Category\";\r\n\r\n/**\r\n * Delegate logger, delegates logging to given logger (constructor).\r\n */\r\nexport class CategoryDelegateLoggerImpl implements CategoryLogger {\r\n\r\n  private _delegate: CategoryLogger;\r\n\r\n  constructor(delegate: CategoryLogger) {\r\n    this._delegate = delegate;\r\n  }\r\n\r\n  get delegate(): CategoryLogger {\r\n    return this._delegate;\r\n  }\r\n\r\n  set delegate(value: CategoryLogger) {\r\n    this._delegate = value;\r\n  }\r\n\r\n  public finest(msg: MessageType, ...categories: Category[]): void {\r\n    this._delegate.finest(msg, ...categories);\r\n  }\r\n\r\n  public finer(msg: MessageType, ...categories: Category[]): void {\r\n    this._delegate.finer(msg, ...categories);\r\n  }\r\n\r\n  public fine(msg: MessageType, ...categories: Category[]): void {\r\n    this._delegate.fine(msg, ...categories);\r\n  }\r\n\r\n  public config(msg: MessageType, ...categories: Category[]): void {\r\n    this._delegate.config(msg, ...categories);\r\n  }\r\n\r\n  public info(msg: MessageType, ...categories: Category[]): void {\r\n    this._delegate.info(msg, ...categories);\r\n  }\r\n\r\n  public warning(msg: MessageType, error: Error, ...categories: Category[]): void {\r\n    this._delegate.warning(msg, error, ...categories);\r\n  }\r\n\r\n  public severe(msg: MessageType, error: Error, ...categories: Category[]): void {\r\n    this._delegate.severe(msg, error, ...categories);\r\n  }\r\n\r\n  public resolved(msg: MessageType, error: Error, ...categories: Category[]): void {\r\n    this._delegate.resolved(msg, error, ...categories);\r\n  }\r\n\r\n  public log(level: LogLevel, msg: MessageType, error: Error, ...categories: Category[]): void {\r\n    this._delegate.log(level, msg, error, ...categories);\r\n  }\r\n}\r\n","import {ExtensionHelper} from \"../../extension/ExtensionHelper\";\r\nimport {AbstractCategoryLogger, CategoryLogMessage} from \"./AbstractCategoryLogger\";\r\nimport {Category} from \"./Category\";\r\nimport {RuntimeSettings} from \"./RuntimeSettings\";\r\n\r\n/**\r\n * This class should not be used directly, it is used for communication with the extension only.\r\n */\r\nexport class CategoryExtensionLoggerImpl extends AbstractCategoryLogger {\r\n\r\n  constructor(rootCategory: Category, runtimeSettings: RuntimeSettings) {\r\n    super(rootCategory, runtimeSettings);\r\n  }\r\n\r\n  protected doLog(msg: CategoryLogMessage): void {\r\n    if (typeof window !== \"undefined\") {\r\n      ExtensionHelper.sendCategoryLogMessage(msg);\r\n    }\r\n    else {\r\n      /* tslint:disable:no-console */\r\n      console.log(\"window is not available, you must be running in a browser for this. Dropped message.\");\r\n      /* tslint:enable:no-console */\r\n    }\r\n  }\r\n\r\n}\r\n","import {AbstractCategoryLogger, CategoryLogMessage} from \"./AbstractCategoryLogger\";\r\n\r\n/**\r\n * Logger which buffers all messages, use with care due to possible high memory footprint.\r\n * Can be convenient in some cases. Call toString() for full output, or cast to this class\r\n * and call getMessages() to do something with it yourself.\r\n */\r\nexport class CategoryMessageBufferLoggerImpl extends AbstractCategoryLogger {\r\n\r\n  private messages: string[] = [];\r\n\r\n  public getMessages(): string[] {\r\n    return this.messages;\r\n  }\r\n\r\n  public toString(): string {\r\n    return this.messages.map((msg: string) => {\r\n      return msg;\r\n    }).join(\"\\n\");\r\n  }\r\n\r\n  protected doLog(msg: CategoryLogMessage): void {\r\n    const messageFormatter = this._getMessageFormatter();\r\n    let fullMsg: string;\r\n    if (messageFormatter === null) {\r\n      fullMsg = this.createDefaultLogMessage(msg);\r\n    }\r\n    else {\r\n      fullMsg = messageFormatter(msg);\r\n    }\r\n    this.messages.push(fullMsg);\r\n  }\r\n}\r\n","import {CategoryLogger} from \"./CategoryLogger\";\r\nimport {Category} from \"./Category\";\r\nimport {RuntimeSettings} from \"./RuntimeSettings\";\r\nimport {CategoryLogFormat, LoggerType, LogLevel} from \"../LoggerOptions\";\r\nimport {CategoryLogMessage} from \"./AbstractCategoryLogger\";\r\n\r\n/**\r\n * RuntimeSettings for a category, at runtime these are associated to a category.\r\n */\r\nexport class CategoryRuntimeSettings {\r\n\r\n  private _category: Category;\r\n  private _logLevel: LogLevel;\r\n  private _loggerType: LoggerType;\r\n  private _logFormat: CategoryLogFormat;\r\n\r\n  private _callBackLogger: ((rootCategory: Category, runtimeSettings: RuntimeSettings) => CategoryLogger) | null;\r\n  private _formatterLogMessage: ((message: CategoryLogMessage) => string) | null = null;\r\n\r\n  constructor(category: Category, logLevel: LogLevel = LogLevel.Warning, loggerType: LoggerType = LoggerType.Console,\r\n              logFormat: CategoryLogFormat = new CategoryLogFormat(),\r\n              callBackLogger: ((rootCategory: Category, runtimeSettings: RuntimeSettings) => CategoryLogger) | null = null,\r\n              formatterLogMessage: ((message: CategoryLogMessage) => string) | null = null) {\r\n    this._category = category;\r\n    this._logLevel = logLevel;\r\n    this._loggerType = loggerType;\r\n    this._logFormat = logFormat;\r\n    this._callBackLogger = callBackLogger;\r\n    this._formatterLogMessage = formatterLogMessage;\r\n  }\r\n\r\n  get category(): Category {\r\n    return this._category;\r\n  }\r\n\r\n  get logLevel(): LogLevel {\r\n    return this._logLevel;\r\n  }\r\n\r\n  set logLevel(value: LogLevel) {\r\n    this._logLevel = value;\r\n  }\r\n\r\n  get loggerType(): LoggerType {\r\n    return this._loggerType;\r\n  }\r\n\r\n  set loggerType(value: LoggerType) {\r\n    this._loggerType = value;\r\n  }\r\n\r\n  get logFormat(): CategoryLogFormat {\r\n    return this._logFormat;\r\n  }\r\n\r\n  set logFormat(value: CategoryLogFormat) {\r\n    this._logFormat = value;\r\n  }\r\n\r\n  get callBackLogger(): ((rootCategory: Category, runtimeSettings: RuntimeSettings) => CategoryLogger) | null {\r\n    return this._callBackLogger;\r\n  }\r\n\r\n  set callBackLogger(value: ((rootCategory: Category, runtimeSettings: RuntimeSettings) => CategoryLogger) | null) {\r\n    this._callBackLogger = value;\r\n  }\r\n\r\n  get formatterLogMessage(): ((message: CategoryLogMessage) => string) | null {\r\n    return this._formatterLogMessage;\r\n  }\r\n\r\n  set formatterLogMessage(value: ((message: CategoryLogMessage) => string) | null) {\r\n    this._formatterLogMessage = value;\r\n  }\r\n}\r\n","import {CategoryLogger} from \"./CategoryLogger\";\r\nimport {Category} from \"./Category\";\r\nimport {RuntimeSettings} from \"./RuntimeSettings\";\r\nimport {CategoryLogFormat, LoggerType, LogLevel} from \"../LoggerOptions\";\r\nimport {CategoryLogMessage} from \"./AbstractCategoryLogger\";\r\n\r\n/**\r\n * Default configuration, can be used to initially set a different default configuration\r\n * on the CategoryServiceFactory. This will be applied to all categories already registered (or\r\n * registered in the future). Can also be applied to one Category (and childs).\r\n */\r\nexport class CategoryConfiguration {\r\n\r\n  private _logLevel: LogLevel;\r\n  private _loggerType: LoggerType;\r\n  private _logFormat: CategoryLogFormat;\r\n\r\n  private _callBackLogger: ((rootCategory: Category, runtimeSettings: RuntimeSettings) => CategoryLogger) | null;\r\n  private _formatterLogMessage: ((message: CategoryLogMessage) => string) | null = null;\r\n\r\n  /**\r\n   * Create a new instance\r\n   * @param logLevel Log level for all loggers, default is LogLevel.Warning\r\n   * @param loggerType Where to log, default is LoggerType.Console\r\n   * @param logFormat What logging format to use, use default instance, for default values see CategoryLogFormat.\r\n   * @param callBackLogger Optional callback, if LoggerType.Custom is used as loggerType. In that case must return a new Logger instance.\r\n   *            It is recommended to extend AbstractCategoryLogger to make your custom logger.\r\n   */\r\n  constructor(logLevel: LogLevel = LogLevel.Warning, loggerType: LoggerType = LoggerType.Console,\r\n              logFormat: CategoryLogFormat = new CategoryLogFormat(),\r\n              callBackLogger: ((rootCategory: Category, runtimeSettings: RuntimeSettings) => CategoryLogger) | null = null) {\r\n    this._logLevel = logLevel;\r\n    this._loggerType = loggerType;\r\n    this._logFormat = logFormat;\r\n    this._callBackLogger = callBackLogger;\r\n\r\n    if (this._loggerType === LoggerType.Custom && this.callBackLogger === null) {\r\n      throw new Error(\"If you specify loggerType to be Custom, you must provide the callBackLogger argument\");\r\n    }\r\n  }\r\n\r\n  get logLevel(): LogLevel {\r\n    return this._logLevel;\r\n  }\r\n\r\n  get loggerType(): LoggerType {\r\n    return this._loggerType;\r\n  }\r\n\r\n  get logFormat(): CategoryLogFormat {\r\n    return this._logFormat;\r\n  }\r\n\r\n  get callBackLogger(): ((rootCategory: Category, runtimeSettings: RuntimeSettings) => CategoryLogger) | null {\r\n    return this._callBackLogger;\r\n  }\r\n\r\n  /**\r\n   * Get the formatterLogMessage function, see comment on the setter.\r\n   * @returns {((message:CategoryLogMessage)=>string)|null}\r\n   */\r\n  get formatterLogMessage(): ((message: CategoryLogMessage) => string) | null {\r\n    return this._formatterLogMessage;\r\n  }\r\n\r\n  /**\r\n   * Set the default formatterLogMessage function, if set it is applied to all type of loggers except for a custom logger.\r\n   * By default this is null (not set). You can assign a function to allow custom formatting of a log message.\r\n   * Each log message will call this function then and expects your function to format the message and return a string.\r\n   * Will throw an error if you attempt to set a formatterLogMessage if the LoggerType is custom.\r\n   * @param value The formatter function, or null to reset it.\r\n   */\r\n  set formatterLogMessage(value: ((message: CategoryLogMessage) => string) | null) {\r\n    if (value !== null && this._loggerType === LoggerType.Custom) {\r\n      throw new Error(\"You cannot specify a formatter for log messages if your loggerType is Custom\");\r\n    }\r\n    this._formatterLogMessage = value;\r\n  }\r\n\r\n  public copy(): CategoryConfiguration {\r\n    const config = new CategoryConfiguration(this.logLevel, this.loggerType, this.logFormat.copy(), this.callBackLogger);\r\n    config.formatterLogMessage = this.formatterLogMessage;\r\n    return config;\r\n  }\r\n}\r\n","import {SimpleMap} from \"../../utils/DataStructures\";\r\nimport {LoggerType} from \"../LoggerOptions\";\r\nimport {CategoryConsoleLoggerImpl} from \"./CategoryConsoleLoggerImpl\";\r\nimport {CategoryDelegateLoggerImpl} from \"./CategoryDelegateLoggerImpl\";\r\nimport {CategoryExtensionLoggerImpl} from \"./CategoryExtensionLoggerImpl\";\r\nimport {CategoryMessageBufferLoggerImpl} from \"./CategoryMessageBufferImpl\";\r\nimport {ExtensionHelper} from \"../../extension/ExtensionHelper\";\r\nimport {Category} from \"./Category\";\r\nimport {CategoryLogger} from \"./CategoryLogger\";\r\nimport {RuntimeSettings} from \"./RuntimeSettings\";\r\nimport {CategoryRuntimeSettings} from \"./CategoryRuntimeSettings\";\r\nimport {CategoryConfiguration} from \"./CategoryConfiguration\";\r\n\r\n/**\r\n * The service (only available as singleton) for all category related stuff as\r\n * retrieving, registering a logger. You should normally NOT use this,\r\n * instead use CategoryServiceFactory which is meant for end users.\r\n */\r\nexport class CategoryServiceImpl implements RuntimeSettings {\r\n\r\n  // Singleton category service, used by CategoryServiceFactory as well as Categories.\r\n  // Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.\r\n  private static _INSTANCE: CategoryServiceImpl | null = null;\r\n  private _defaultConfig: CategoryConfiguration = new CategoryConfiguration();\r\n\r\n  private _mapState = new SimpleMap<CategoryState>();\r\n\r\n  private constructor() {\r\n    // Private constructor\r\n    ExtensionHelper.register();\r\n  }\r\n\r\n  public static getInstance(): CategoryServiceImpl {\r\n    // Load on-demand, to assure webpack ordering of module usage doesn't screw things over\r\n    // for us when we accidentally change the order.\r\n    if (CategoryServiceImpl._INSTANCE === null) {\r\n      CategoryServiceImpl._INSTANCE = new CategoryServiceImpl();\r\n    }\r\n    return CategoryServiceImpl._INSTANCE;\r\n  }\r\n\r\n  public getLogger(category: Category): CategoryLogger {\r\n    return this.createOrGetCategoryState(category).logger;\r\n  }\r\n\r\n  /**\r\n   * Clears everything, including a default configuration you may have set.\r\n   * After this you need to re-register your categories etc.\r\n   */\r\n  public clear(): void {\r\n    this._mapState.clear();\r\n    this.setDefaultConfiguration(new CategoryConfiguration());\r\n  }\r\n\r\n  public getCategorySettings(category: Category): CategoryRuntimeSettings {\r\n    return this.createOrGetCategoryState(category).currentRuntimeSettings;\r\n  }\r\n\r\n  public getOriginalCategorySettings(category: Category): CategoryRuntimeSettings {\r\n    return this.createOrGetCategoryState(category).originalRuntimeSettings;\r\n  }\r\n\r\n  /**\r\n   * Set the default configuration. New root loggers created get this\r\n   * applied. If you want to reset all current loggers to have this\r\n   * applied as well, pass in reset=true (the default is false). All\r\n   * categories will be reset then as well.\r\n   * @param config New config\r\n   * @param reset Defaults to true. Set to true to reset all loggers and current runtimesettings.\r\n   */\r\n  public setDefaultConfiguration(config: CategoryConfiguration, reset: boolean = true): void {\r\n    this._defaultConfig = config;\r\n    if (reset) {\r\n      this._mapState.forEachValue((state) => {\r\n        state.updateSettings(config);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set new configuration settings for a category (and possibly its child categories)\r\n   * @param config Config\r\n   * @param category Category\r\n   * @param applyChildren True to apply to child categories, defaults to false.\r\n   */\r\n  public setConfigurationCategory(config: CategoryConfiguration, category: Category, applyChildren: boolean = false): void {\r\n    this.createOrGetCategoryState(category).updateSettings(config);\r\n\r\n    // Apply the settings to children recursive if requested\r\n    if (applyChildren) {\r\n      category.children.forEach((child) => {\r\n        // False flag, a child cannot reset a rootlogger\r\n        this.setConfigurationCategory(config, child, applyChildren);\r\n      });\r\n    }\r\n  }\r\n\r\n  public registerCategory(category: Category): void {\r\n    if (category === null || typeof category === \"undefined\") {\r\n      throw new Error(\"Category CANNOT be null/undefined\");\r\n    }\r\n\r\n    if (this._mapState.exists(CategoryServiceImpl.getCategoryKey(category))) {\r\n      throw new Error(\"Cannot add this root category with name: \" + category.name + \", it already exists (same name in hierarchy).\");\r\n    }\r\n\r\n    this.createOrGetCategoryState(category);\r\n  }\r\n\r\n  /**\r\n   * Used to enable integration with chrome extension. Do not use manually, the\r\n   * extension and the logger framework deal with this.\r\n   */\r\n  public enableExtensionIntegration(): void {\r\n    this._mapState.forEachValue((state) => state.enableForExtension(this));\r\n  }\r\n\r\n  /**\r\n   * Return all root categories currently registered.\r\n   */\r\n  public getRootCategories(): Category[] {\r\n    return this._mapState.values().filter((state) => state.category.parent == null).map((state) => state.category);\r\n  }\r\n\r\n  /**\r\n   * Return Category by id\r\n   * @param id The id of the category to find\r\n   * @returns {Category} or null if not found\r\n   */\r\n  public getCategoryById(id: number): Category | null {\r\n    const result = this._mapState.values().filter((state) => state.category.id === id).map((state) => state.category);\r\n    if (result.length === 1) {\r\n      return result[0];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private createOrGetCategoryState(category: Category): CategoryState {\r\n    const key = CategoryServiceImpl.getCategoryKey(category);\r\n    const state = this._mapState.get(key);\r\n    if (typeof state !== \"undefined\") {\r\n      return state;\r\n    }\r\n\r\n    const newState = this.createState(category);\r\n    this._mapState.put(key, newState);\r\n    return newState;\r\n  }\r\n\r\n  private createState(category: Category): CategoryState {\r\n    return new CategoryState(category, () => this._defaultConfig, (config: CategoryConfiguration, cat: Category) => this.createLogger(config, cat));\r\n  }\r\n\r\n  private createLogger(config: CategoryConfiguration, category: Category): CategoryLogger {\r\n    // Default is always a console logger\r\n    switch (config.loggerType) {\r\n      case LoggerType.Console:\r\n        return new CategoryConsoleLoggerImpl(category, this);\r\n      case LoggerType.MessageBuffer:\r\n        return new CategoryMessageBufferLoggerImpl(category, this);\r\n      case LoggerType.Custom:\r\n        if (config.callBackLogger === null) {\r\n          throw new Error(\"Cannot create custom logger, custom callback is null\");\r\n        }\r\n        else {\r\n          return config.callBackLogger(category, this);\r\n        }\r\n      default:\r\n        throw new Error(\"Cannot create a Logger for LoggerType: \" + config.loggerType);\r\n    }\r\n  }\r\n\r\n  private static getCategoryKey(category: Category): string {\r\n    return category.getCategoryPath();\r\n  }\r\n}\r\n\r\nclass CategoryState {\r\n\r\n  private readonly _category: Category;\r\n  private readonly _lazyState: LazyState;\r\n\r\n  constructor(category: Category, defaultConfig: () => CategoryConfiguration, createLogger: (config: CategoryConfiguration, category: Category) => CategoryLogger) {\r\n    this._category = category;\r\n    this._lazyState = new LazyState(category, defaultConfig, createLogger);\r\n  }\r\n\r\n  get category(): Category {\r\n    return this._category;\r\n  }\r\n\r\n  get logger(): CategoryLogger {\r\n    return this._lazyState.getLogger();\r\n  }\r\n\r\n  get originalRuntimeSettings(): CategoryRuntimeSettings {\r\n    return this._lazyState.getOriginalRuntimeSettings();\r\n  }\r\n\r\n  get currentRuntimeSettings(): CategoryRuntimeSettings {\r\n    return this._lazyState.getCurrentRuntimeSettings();\r\n  }\r\n\r\n  public enableForExtension(runtimeSettings: RuntimeSettings) {\r\n    this._lazyState.enableForExtension(runtimeSettings);\r\n  }\r\n\r\n  public updateSettings(config: CategoryConfiguration) {\r\n    this._lazyState.updateSettings(config);\r\n  }\r\n}\r\n\r\nclass LazyState {\r\n\r\n  private readonly _category: Category;\r\n  private _defaultConfig: () => CategoryConfiguration;\r\n  private readonly _createLogger: (config: CategoryConfiguration, category: Category) => CategoryLogger;\r\n\r\n  private _logger!: CategoryLogger; // Original real logger\r\n  private _wrappedLogger!: CategoryLogger;  // Wrapped logger, initially _logger - can be changed if extension is enabled.\r\n  private _delegateLogger!: CategoryDelegateLoggerImpl;\r\n\r\n  private _originalRuntimeSettings!: CategoryRuntimeSettings;\r\n  private _currentRuntimeSettings!: CategoryRuntimeSettings;\r\n\r\n  constructor(category: Category, defaultConfig: () => CategoryConfiguration, createLogger: (config: CategoryConfiguration, category: Category) => CategoryLogger) {\r\n    this._category = category;\r\n    this._defaultConfig = defaultConfig;\r\n    this._createLogger = createLogger;\r\n  }\r\n\r\n  public isLoaded(): boolean {\r\n    return (typeof this._logger !== \"undefined\");\r\n  }\r\n\r\n  public getLogger(): CategoryLogger {\r\n    this.loadLoggerOnDemand();\r\n    return this._delegateLogger;\r\n  }\r\n\r\n  public getOriginalRuntimeSettings(): CategoryRuntimeSettings {\r\n    this.loadLoggerOnDemand();\r\n    return this._originalRuntimeSettings;\r\n  }\r\n\r\n  public getCurrentRuntimeSettings(): CategoryRuntimeSettings {\r\n    this.loadLoggerOnDemand();\r\n    return this._currentRuntimeSettings;\r\n  }\r\n\r\n  public enableForExtension(runtimeSettings: RuntimeSettings) {\r\n    this.loadLoggerOnDemand();\r\n    if (!(this._wrappedLogger instanceof CategoryExtensionLoggerImpl)) {\r\n      /* tslint:disable no-console */\r\n      console.log(\"Reconfiguring logger for extension for category: \" + this._category.name);\r\n      /* tslint:enable no-console */\r\n\r\n      this._wrappedLogger = new CategoryExtensionLoggerImpl(this._category, runtimeSettings);\r\n      this._delegateLogger.delegate = this._wrappedLogger;\r\n    }\r\n  }\r\n\r\n  public updateSettings(config: CategoryConfiguration) {\r\n    if (this.isLoaded()) {\r\n      this._currentRuntimeSettings.logLevel = config.logLevel;\r\n      this._currentRuntimeSettings.loggerType = config.loggerType;\r\n      this._currentRuntimeSettings.logFormat = config.logFormat;\r\n      this._currentRuntimeSettings.callBackLogger = config.callBackLogger;\r\n      this._currentRuntimeSettings.formatterLogMessage = config.formatterLogMessage;\r\n\r\n      // Replace the real logger, it may have changed.\r\n      this._logger = this._createLogger(config, this._category);\r\n      if (!(this._wrappedLogger instanceof CategoryExtensionLoggerImpl)) {\r\n        this._wrappedLogger = this._logger;\r\n      }\r\n      this._delegateLogger.delegate = this._wrappedLogger;\r\n    }\r\n    else {\r\n      // Set this config, it may be for the category specific, the default is therefore not good enough.\r\n      this._defaultConfig = () => config;\r\n    }\r\n  }\r\n\r\n  private loadLoggerOnDemand(): void {\r\n    if (!this.isLoaded()) {\r\n      this._logger = this._createLogger(this._defaultConfig(), this._category);\r\n      this._wrappedLogger = this._logger;\r\n      this._delegateLogger = new CategoryDelegateLoggerImpl(this._wrappedLogger);\r\n      this._originalRuntimeSettings = this.initNewSettings();\r\n      this._currentRuntimeSettings = this.initNewSettings();\r\n    }\r\n  }\r\n\r\n  private initNewSettings(): CategoryRuntimeSettings {\r\n    const defSettings = this._defaultConfig().copy();\r\n    return new CategoryRuntimeSettings(this._category, defSettings.logLevel, defSettings.loggerType, defSettings.logFormat, defSettings.callBackLogger, defSettings.formatterLogMessage);\r\n  }\r\n}\r\n","import {CategoryLogMessage} from \"../log/category/AbstractCategoryLogger\";\r\nimport {CategoryServiceImpl} from \"../log/category/CategoryService\";\r\nimport {LogLevel} from \"../log/LoggerOptions\";\r\nimport {MessageFormatUtils} from \"../utils/MessageUtils\";\r\nimport {ExtensionMessageContentJSON, ExtensionMessageJSON} from \"./ExtensionMessageJSON\";\r\nimport {ExtensionRequestChangeLogLevelJSON} from \"./MessagesFromExtensionJSON\";\r\nimport {\r\n  ExtensionCategoriesUpdateMessageJSON,\r\n  ExtensionCategoryJSON,\r\n  ExtensionCategoryLogMessageJSON,\r\n} from \"./MessagesToExtensionJSON\";\r\nimport {Category} from \"../log/category/Category\";\r\n\r\nexport class ExtensionHelper {\r\n\r\n  private static registered: boolean = false;\r\n\r\n  private constructor() {\r\n    // Private constructor\r\n  }\r\n\r\n  /**\r\n   * Enables the window event listener to listen to messages (from extensions).\r\n   * Can be registered/enabled only once.\r\n   */\r\n  public static register(): void {\r\n    if (!ExtensionHelper.registered) {\r\n      const listener = (evt: MessageEvent) => {\r\n        const msg = evt.data as ExtensionMessageJSON<any>;\r\n        if (msg !== null) {\r\n          ExtensionHelper.processMessageFromExtension(msg);\r\n        }\r\n      };\r\n\r\n      if (typeof window !== \"undefined\" && typeof window.removeEventListener !== \"undefined\" && typeof window.addEventListener !== \"undefined\") {\r\n        window.removeEventListener(\"message\", listener);\r\n        window.addEventListener(\"message\", listener);\r\n\r\n        ExtensionHelper.registered = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  public static processMessageFromExtension(msg: ExtensionMessageJSON<any>): void {\r\n    if (!ExtensionHelper.registered) {\r\n      return;\r\n    }\r\n    /* tslint:disable:no-console */\r\n    if (msg.from === \"tsl-extension\") {\r\n      const data = msg.data;\r\n      switch (data.type) {\r\n        case \"register\":\r\n          ExtensionHelper.enableExtensionIntegration();\r\n          break;\r\n        case \"request-change-loglevel\":\r\n          const valueRequest = data.value as ExtensionRequestChangeLogLevelJSON;\r\n          const catsApplied = ExtensionHelper.applyLogLevel(valueRequest.categoryId, valueRequest.logLevel, valueRequest.recursive);\r\n          if (catsApplied.length > 0) {\r\n            // Send changes back\r\n            ExtensionHelper.sendCategoriesRuntimeUpdateMessage(catsApplied);\r\n          }\r\n          break;\r\n        default:\r\n          console.log(\"Unknown command to process message from extension, command was: \" + data.type);\r\n          break;\r\n      }\r\n    }\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public static sendCategoryLogMessage(msg: CategoryLogMessage): void {\r\n    if (!ExtensionHelper.registered) {\r\n      return;\r\n    }\r\n\r\n    const categoryIds = msg.categories.map((cat: Category) => {\r\n      return cat.id;\r\n    });\r\n\r\n    const content = {\r\n      type: \"log-message\",\r\n      value: {\r\n        categories: categoryIds,\r\n        errorAsStack: msg.errorAsStack,\r\n        formattedMessage: MessageFormatUtils.renderDefaultMessage(msg, false),\r\n        logLevel: LogLevel[msg.level].toString(),\r\n        message: msg.messageAsString,\r\n        resolvedErrorMessage: msg.isResolvedErrorMessage\r\n      }\r\n    } as ExtensionMessageContentJSON<ExtensionCategoryLogMessageJSON>;\r\n\r\n    const message = {\r\n      data: content,\r\n      from: \"tsl-logging\",\r\n    } as ExtensionMessageJSON<ExtensionCategoryLogMessageJSON>;\r\n\r\n    ExtensionHelper.sendMessage(message);\r\n  }\r\n\r\n  private static sendCategoriesRuntimeUpdateMessage(categories: Category[]): void {\r\n    if (!ExtensionHelper.registered) {\r\n      return;\r\n    }\r\n    const service = CategoryServiceImpl.getInstance();\r\n    const catLevels = {categories: Array<{id: number, logLevel: string}>()} as ExtensionCategoriesUpdateMessageJSON;\r\n\r\n    categories.forEach((cat: Category) => {\r\n      const catSettings = service.getCategorySettings(cat);\r\n      if (catSettings != null) {\r\n        catLevels.categories.push({id: cat.id, logLevel: LogLevel[catSettings.logLevel].toString()});\r\n      }\r\n    });\r\n\r\n    const content = {\r\n      type: \"categories-rt-update\",\r\n      value: catLevels,\r\n    } as ExtensionMessageContentJSON<ExtensionCategoriesUpdateMessageJSON>;\r\n\r\n    const message = {\r\n      data: content,\r\n      from: \"tsl-logging\"\r\n    } as ExtensionMessageJSON<ExtensionCategoriesUpdateMessageJSON>;\r\n\r\n    ExtensionHelper.sendMessage(message);\r\n  }\r\n\r\n  private static sendRootCategoriesToExtension(): void {\r\n    if (!ExtensionHelper.registered) {\r\n      return;\r\n    }\r\n\r\n    const categories = CategoryServiceImpl.getInstance().getRootCategories().map((cat: Category) => {\r\n      return ExtensionHelper.getCategoryAsJSON(cat);\r\n    });\r\n\r\n    const content = {\r\n      type: \"root-categories-tree\",\r\n      value: categories\r\n    } as ExtensionMessageContentJSON<ExtensionCategoryJSON[]>;\r\n\r\n    const message = {\r\n      data: content,\r\n      from: \"tsl-logging\"\r\n    } as ExtensionMessageJSON<ExtensionCategoryJSON[]>;\r\n\r\n    ExtensionHelper.sendMessage(message);\r\n  }\r\n\r\n  /**\r\n   * If extension integration is enabled, will send the root categories over to the extension.\r\n   * Otherwise does nothing.\r\n   */\r\n  private static getCategoryAsJSON(cat: Category): ExtensionCategoryJSON {\r\n    const childCategories = cat.children.map((child) => {\r\n      return ExtensionHelper.getCategoryAsJSON(child);\r\n    });\r\n\r\n    return {\r\n      children: childCategories,\r\n      id: cat.id,\r\n      logLevel: LogLevel[cat.logLevel].toString(),\r\n      name: cat.name,\r\n      parentId: (cat.parent != null ? cat.parent.id : null),\r\n    } as ExtensionCategoryJSON;\r\n  }\r\n\r\n  private static applyLogLevel(categoryId: number, logLevel: string, recursive: boolean): Category[] {\r\n    const cats: Category[] = [];\r\n\r\n    const category = CategoryServiceImpl.getInstance().getCategoryById(categoryId);\r\n    if (category != null) {\r\n      ExtensionHelper._applyLogLevelRecursive(category, LogLevel.fromString(logLevel), recursive, cats);\r\n    }\r\n    else {\r\n      /* tslint:disable:no-console */\r\n      console.log(\"Could not change log level, failed to find category with id: \" + categoryId);\r\n      /* tslint:enable:no-console */\r\n    }\r\n\r\n    return cats;\r\n  }\r\n\r\n  private static _applyLogLevelRecursive(category: Category, logLevel: LogLevel, recursive: boolean, cats: Category[]): void {\r\n    const categorySettings = CategoryServiceImpl.getInstance().getCategorySettings(category);\r\n    if (categorySettings != null) {\r\n      categorySettings.logLevel = logLevel;\r\n\r\n      cats.push(category);\r\n\r\n      if (recursive) {\r\n        category.children.forEach((child: Category) => {\r\n          ExtensionHelper._applyLogLevelRecursive(child, logLevel, recursive, cats);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private static getAllCategories(): Category[] {\r\n    const cats: Category[] = [];\r\n\r\n    const addCats = (cat: Category, allCats: Category[]) => {\r\n      allCats.push(cat);\r\n\r\n      cat.children.forEach((catChild: Category) => {\r\n        addCats(catChild, allCats);\r\n      });\r\n    };\r\n\r\n    CategoryServiceImpl.getInstance().getRootCategories().forEach((cat: Category) => {\r\n      addCats(cat, cats);\r\n    });\r\n\r\n    return cats;\r\n  }\r\n\r\n  private static sendMessage(msg: ExtensionMessageJSON<any>): void {\r\n    if (!ExtensionHelper.registered) {\r\n      return;\r\n    }\r\n\r\n    if (typeof window !== \"undefined\" && typeof window.postMessage !== \"undefined\") {\r\n      window.postMessage(msg, \"*\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Extension framework will call this to enable the integration between two,\r\n   *  after this call the framework will respond with postMessage() messages.\r\n   */\r\n  private static enableExtensionIntegration(): void {\r\n    if (!ExtensionHelper.registered) {\r\n      return;\r\n    }\r\n\r\n    const instance = CategoryServiceImpl.getInstance();\r\n    instance.enableExtensionIntegration();\r\n\r\n    // Send over all categories\r\n    ExtensionHelper.sendRootCategoriesToExtension();\r\n\r\n    // Send over the current runtime levels\r\n    const cats = ExtensionHelper.getAllCategories();\r\n    ExtensionHelper.sendCategoriesRuntimeUpdateMessage(cats);\r\n  }\r\n}\r\n","import {Logger} from \"./Logger\";\r\nimport {LogFormat, LoggerType, LogLevel} from \"../LoggerOptions\";\r\nimport {LogMessage} from \"./AbstractLogger\";\r\nimport {LogGroupRuntimeSettings} from \"./LogGroupRuntimeSettings\";\r\n\r\n/**\r\n * Defines a LogGroupRule, this allows you to either have everything configured the same way\r\n * or for example loggers that start with name model. It allows you to group loggers together\r\n * to have a certain loglevel and other settings. You can configure this when creating the\r\n * LoggerFactory (which accepts multiple LogGroupRules).\r\n */\r\nexport class LogGroupRule {\r\n\r\n  private _regExp: RegExp;\r\n  private _level: LogLevel;\r\n  private _loggerType: LoggerType;\r\n  private _logFormat: LogFormat;\r\n  private _callBackLogger: ((name: string, settings: LogGroupRuntimeSettings) => Logger) | null;\r\n  private _formatterLogMessage: ((message: LogMessage) => string) | null = null;\r\n\r\n  /**\r\n   * Create a LogGroupRule. Basically you define what logger name(s) match for this group, what level should be used what logger type (where to log)\r\n   * and what format to write in. If the loggerType is custom, then the callBackLogger must be supplied as callback function to return a custom logger.\r\n   * @param regExp Regular expression, what matches for your logger names for this group\r\n   * @param level LogLevel\r\n   * @param logFormat LogFormat\r\n   * @param loggerType Type of logger, if Custom, make sure to implement callBackLogger and pass in, this will be called so you can return your own logger.\r\n   * @param callBackLogger Callback function to return a new clean custom logger (yours!)\r\n   */\r\n  constructor(regExp: RegExp, level: LogLevel, logFormat: LogFormat = new LogFormat(),\r\n              loggerType: LoggerType = LoggerType.Console,\r\n              callBackLogger: ((name: string, settings: LogGroupRuntimeSettings) => Logger) | null = null) {\r\n    this._regExp = regExp;\r\n    this._level = level;\r\n    this._logFormat = logFormat;\r\n    this._loggerType = loggerType;\r\n    this._callBackLogger = callBackLogger;\r\n  }\r\n\r\n  get regExp(): RegExp {\r\n    return this._regExp;\r\n  }\r\n\r\n  get level(): LogLevel {\r\n    return this._level;\r\n  }\r\n\r\n  get loggerType(): LoggerType {\r\n    return this._loggerType;\r\n  }\r\n\r\n  get logFormat(): LogFormat {\r\n    return this._logFormat;\r\n  }\r\n\r\n  get callBackLogger(): ((name: string, settings: LogGroupRuntimeSettings) => Logger) | null {\r\n    return this._callBackLogger;\r\n  }\r\n\r\n  /**\r\n   * Get the formatterLogMessage function, see comment on the setter.\r\n   * @returns {((message:LogMessage)=>string)|null}\r\n   */\r\n  get formatterLogMessage(): ((message: LogMessage) => string) | null {\r\n    return this._formatterLogMessage;\r\n  }\r\n\r\n  /**\r\n   * Set the default formatterLogMessage function, if set it is applied to all type of loggers except for a custom logger.\r\n   * By default this is null (not set). You can assign a function to allow custom formatting of a log message.\r\n   * Each log message will call this function then and expects your function to format the message and return a string.\r\n   * Will throw an error if you attempt to set a formatterLogMessage if the LoggerType is custom.\r\n   * @param value The formatter function, or null to reset it.\r\n   */\r\n  set formatterLogMessage(value: ((message: LogMessage) => string) | null) {\r\n    if (value !== null && this._loggerType === LoggerType.Custom) {\r\n      throw new Error(\"You cannot specify a formatter for log messages if your loggerType is Custom\");\r\n    }\r\n    this._formatterLogMessage = value;\r\n  }\r\n}\r\n","import {LogGroupRule} from \"./LogGroupRule\";\r\n\r\n/**\r\n * Options object you can use to configure the LoggerFactory you create at LFService.\r\n */\r\nexport class LoggerFactoryOptions {\r\n\r\n  private _logGroupRules: LogGroupRule[] = [];\r\n  private _enabled: boolean = true;\r\n\r\n  /**\r\n   * Add LogGroupRule, see {LogGroupRule) for details\r\n   * @param rule Rule to add\r\n   * @returns {LoggerFactoryOptions} returns itself\r\n   */\r\n  public addLogGroupRule(rule: LogGroupRule): LoggerFactoryOptions {\r\n    this._logGroupRules.push(rule);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enable or disable logging completely for the LoggerFactory.\r\n   * @param enabled True for enabled (default)\r\n   * @returns {LoggerFactoryOptions} returns itself\r\n   */\r\n  public setEnabled(enabled: boolean): LoggerFactoryOptions {\r\n    this._enabled = enabled;\r\n    return this;\r\n  }\r\n\r\n  get logGroupRules(): LogGroupRule[] {\r\n    return this._logGroupRules;\r\n  }\r\n\r\n  get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n}\r\n","import {SimpleMap} from \"../../utils/DataStructures\";\r\nimport {LogLevel} from \"../LoggerOptions\";\r\nimport {LoggerFactory} from \"./LoggerFactory\";\r\nimport {LoggerFactoryImpl} from \"./LoggerFactoryImpl\";\r\nimport {LoggerFactoryRuntimeSettings} from \"./LoggerFactoryRuntimeSettings\";\r\nimport {ExtensionHelper} from \"../../extension/ExtensionHelper\";\r\nimport {LogGroupRule} from \"./LogGroupRule\";\r\nimport {LoggerFactoryOptions} from \"./LoggerFactoryOptions\";\r\nimport {LogGroupRuntimeSettings} from \"./LogGroupRuntimeSettings\";\r\nimport {LFServiceRuntimeSettings} from \"./LFServiceRuntimeSettings\";\r\n\r\nclass LFServiceImpl implements LFServiceRuntimeSettings {\r\n\r\n  // Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.\r\n  private static _INSTANCE: LFServiceImpl | null = null;\r\n\r\n  private _nameCounter: number = 1;\r\n  private _mapFactories: SimpleMap<LoggerFactoryImpl> = new SimpleMap<LoggerFactoryImpl>();\r\n\r\n  private constructor() {\r\n    // Private constructor.\r\n\r\n    ExtensionHelper.register();\r\n  }\r\n\r\n  public static getInstance(): LFServiceImpl {\r\n    // Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.\r\n    if (LFServiceImpl._INSTANCE === null) {\r\n      LFServiceImpl._INSTANCE = new LFServiceImpl();\r\n    }\r\n    return LFServiceImpl._INSTANCE;\r\n  }\r\n\r\n  /**\r\n   * Create a new LoggerFactory with given options (if any). If no options\r\n   * are specified, the LoggerFactory, will accept any named logger and will\r\n   * log on info level by default for, to the console.\r\n   * @param options Options, optional.\r\n   * @returns {LoggerFactory}\r\n   */\r\n  public createLoggerFactory(options: LoggerFactoryOptions | null = null): LoggerFactory {\r\n    const name = \"LoggerFactory\" + this._nameCounter++;\r\n    return this.createNamedLoggerFactory(name, options);\r\n  }\r\n\r\n  /**\r\n   * Create a new LoggerFactory using given name (used for console api/extension).\r\n   * @param name Name Pick something short but distinguishable.\r\n   * @param options Options, optional\r\n   * @return {LoggerFactory}\r\n   */\r\n  public createNamedLoggerFactory(name: string, options: LoggerFactoryOptions | null = null): LoggerFactory {\r\n    if (this._mapFactories.exists(name)) {\r\n      throw new Error(\"LoggerFactory with name \" + name + \" already exists.\");\r\n    }\r\n\r\n    let factory: LoggerFactoryImpl;\r\n\r\n    if (options !== null) {\r\n      factory = new LoggerFactoryImpl(name, options);\r\n    }\r\n    else {\r\n      factory = new LoggerFactoryImpl(name, LFServiceImpl.createDefaultOptions());\r\n    }\r\n    this._mapFactories.put(name, factory);\r\n\r\n    return factory;\r\n  }\r\n\r\n  /**\r\n   * Closes all Loggers for LoggerFactories that were created.\r\n   * After this call, all previously fetched Loggers (from their\r\n   * factories) are unusable. The factories remain as they were.\r\n   */\r\n  public closeLoggers(): void {\r\n    this._mapFactories.values().forEach((factory: LoggerFactoryImpl) => {\r\n      factory.closeLoggers();\r\n    });\r\n\r\n    this._mapFactories.clear();\r\n    this._nameCounter = 1;\r\n  }\r\n\r\n  public getRuntimeSettingsForLoggerFactories(): LoggerFactoryRuntimeSettings[] {\r\n    const result: LoggerFactoryRuntimeSettings[] = [];\r\n    this._mapFactories.forEachValue((factory) => result.push(factory));\r\n    return result;\r\n  }\r\n\r\n  public getLogGroupSettings(nameLoggerFactory: string, idLogGroupRule: number): LogGroupRuntimeSettings | null {\r\n    const factory = this._mapFactories.get(nameLoggerFactory);\r\n    if (typeof factory === \"undefined\") {\r\n      return null;\r\n    }\r\n    return factory.getLogGroupRuntimeSettingsByIndex(idLogGroupRule);\r\n  }\r\n\r\n  public getLoggerFactoryRuntimeSettingsByName(nameLoggerFactory: string): LoggerFactoryRuntimeSettings | null {\r\n    const result = this._mapFactories.get(nameLoggerFactory);\r\n    if (typeof result === \"undefined\") {\r\n      return null;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private static createDefaultOptions(): LoggerFactoryOptions {\r\n    return new LoggerFactoryOptions().addLogGroupRule(new LogGroupRule(new RegExp(\".+\"), LogLevel.Info));\r\n  }\r\n}\r\n\r\n/**\r\n * Create and configure your LoggerFactory from here.\r\n */\r\nexport class LFService {\r\n\r\n  private static DEFAULT_LOGGER_FACTORY_NAME = \"DEFAULT\";\r\n\r\n  private static INSTANCE_SERVICE = LFServiceImpl.getInstance();\r\n  private static DEFAULT_LOGGER_FACTORY: LoggerFactory | null = null;\r\n\r\n  /**\r\n   * Create a new LoggerFactory with given options (if any). If no options\r\n   * are specified, the LoggerFactory, will accept any named logger and will\r\n   * log on info level by default for, to the console.\r\n   * @param options Options, optional.\r\n   * @returns {LoggerFactory}\r\n   */\r\n  public static createLoggerFactory(options: LoggerFactoryOptions | null = null): LoggerFactory {\r\n    return LFService.INSTANCE_SERVICE.createLoggerFactory(options);\r\n  }\r\n\r\n  /**\r\n   * Create a new LoggerFactory using given name (used for console api/extension).\r\n   * @param name Name Pick something short but distinguishable. The word \"DEFAULT\" is reserved and cannot be taken, it is used\r\n   * for the default LoggerFactory.\r\n   * @param options Options, optional\r\n   * @return {LoggerFactory}\r\n   */\r\n  public static createNamedLoggerFactory(name: string, options: LoggerFactoryOptions | null = null): LoggerFactory {\r\n    if (name === LFService.DEFAULT_LOGGER_FACTORY_NAME) {\r\n      throw new Error(\"LoggerFactory name: \" + LFService.DEFAULT_LOGGER_FACTORY_NAME + \" is reserved and cannot be used.\");\r\n    }\r\n    return LFService.INSTANCE_SERVICE.createNamedLoggerFactory(name, options);\r\n  }\r\n\r\n  /**\r\n   * Closes all Loggers for LoggerFactories that were created.\r\n   * After this call, all previously fetched Loggers (from their\r\n   * factories) are unusable. The factories remain as they were.\r\n   */\r\n  public static closeLoggers(): void {\r\n    return LFService.INSTANCE_SERVICE.closeLoggers();\r\n  }\r\n\r\n  /**\r\n   * Return LFServiceRuntimeSettings to retrieve information loggerfactories\r\n   * and their runtime settings.\r\n   * @returns {LFServiceRuntimeSettings}\r\n   */\r\n  public static getRuntimeSettings(): LFServiceRuntimeSettings {\r\n    return LFService.INSTANCE_SERVICE;\r\n  }\r\n\r\n  /**\r\n   * This property returns the default LoggerFactory (if not yet initialized it is initialized).\r\n   * This LoggerFactory can be used to share among multiple\r\n   * applications/libraries - that way you can enable/change logging over everything from\r\n   * your own application when required.\r\n   * It is recommended to be used by library developers to make logging easily available for the\r\n   * consumers of their libraries.\r\n   * It is highly recommended to use Loggers from the LoggerFactory with unique grouping/names to prevent\r\n   * clashes of Loggers between multiple projects.\r\n   * @returns {LoggerFactory} Returns the default LoggerFactory\r\n   */\r\n  public static get DEFAULT(): LoggerFactory {\r\n    return LFService.getDefault();\r\n  }\r\n\r\n  private static getDefault(): LoggerFactory {\r\n    if (LFService.DEFAULT_LOGGER_FACTORY === null) {\r\n      LFService.DEFAULT_LOGGER_FACTORY = LFService.DEFAULT_LOGGER_FACTORY = LFService.INSTANCE_SERVICE.createNamedLoggerFactory(\r\n        LFService.DEFAULT_LOGGER_FACTORY_NAME,\r\n        new LoggerFactoryOptions().addLogGroupRule(new LogGroupRule(new RegExp(\".+\"), LogLevel.Severe))\r\n      );\r\n    }\r\n    return LFService.DEFAULT_LOGGER_FACTORY;\r\n  }\r\n}\r\n","import {DateFormatEnum, LoggerType, LogLevel} from \"../log/LoggerOptions\";\r\nimport {LoggerFactoryRuntimeSettings} from \"../log/standard/LoggerFactoryRuntimeSettings\";\r\nimport {LFService} from \"../log/standard/LFService\";\r\nimport {StringBuilder, TuplePair} from \"../utils/DataStructures\";\r\nimport {LogGroupRuntimeSettings} from \"../log/standard/LogGroupRuntimeSettings\";\r\nimport {LFServiceRuntimeSettings} from \"../log/standard/LFServiceRuntimeSettings\";\r\n\r\n/**\r\n * Allows to change the settings for one or all LogGroups.\r\n * Options will be applied only if set, undefined options are ignored.\r\n *\r\n * The only property really required is group.\r\n */\r\nexport interface LogGroupControlSettings {\r\n\r\n  /**\r\n   * Apply to specific group, or \"all\".\r\n   */\r\n  group: number | \"all\";\r\n\r\n  /**\r\n   * Set log level, undefined will not change the setting.\r\n   */\r\n  logLevel: \"Severe\" | \"Warning\" | \"Info\" | \"Config\" | \"Fine\" | \"Finer\" | \"Finest\" |  undefined;\r\n\r\n  /**\r\n   * Set the log format, undefined will not change the setting.\r\n   */\r\n  logFormat: \"Default\" | \"YearMonthDayTime\" | \"YearDayMonthWithFullTime\" | \"YearDayMonthTime\" | undefined;\r\n\r\n  /**\r\n   * Whether to show timestamp, undefined will not change the setting.\r\n   */\r\n  showTimestamp: boolean | undefined;\r\n\r\n  /**\r\n   * Whether to show the logger name, undefined will not change the setting.\r\n   */\r\n  showLoggerName: boolean | undefined;\r\n}\r\n\r\n/**\r\n *  Interface to control LoggerFactories (LoggerFactory and related loggers) through\r\n *  ordinary console (in browsers).\r\n */\r\nexport interface LoggerControl {\r\n\r\n  /**\r\n   * Shows help for this object.\r\n   */\r\n  help(): void;\r\n\r\n  /**\r\n   * Lists all registered logger factories with associated log groups with respective ids\r\n   */\r\n  listFactories(): void;\r\n\r\n  /**\r\n   * Show settings for LoggerFactory id (see listFactories() to get it) or null, for all.\r\n   * @param idFactory LoggerFactory id or all\r\n   */\r\n  showSettings(idFactory: number | \"all\"): void;\r\n\r\n  /**\r\n   * Reset one or all factories back to original values.\r\n   * @param idFactory Id factory or \"all\" for all.\r\n   */\r\n  reset(idFactory: number | \"all\"): void;\r\n\r\n  /**\r\n   * Return LoggerFactoryControl object. Throws error when number is invalid.\r\n   * @param idFactory Id factory\r\n   * @returns {LoggerFactoryControl}\r\n   */\r\n  getLoggerFactoryControl(idFactory: number): LoggerFactoryControl;\r\n\r\n}\r\n\r\n/**\r\n * Interface to control LoggerFactory.\r\n */\r\nexport interface LoggerFactoryControl {\r\n\r\n  /**\r\n   * Shows help\r\n   */\r\n  help(): void;\r\n\r\n  /**\r\n   * Shows an example of usage.\r\n   */\r\n  example(): void;\r\n\r\n  /**\r\n   * Prints settings for given group id, \"all\" for all group.\r\n   */\r\n  showSettings(id: number | \"all\"): void;\r\n\r\n  /**\r\n   * Apply new settings, see LogGroupControlSettings for details.\r\n   * @param settings Settings to set\r\n   */\r\n  change(settings: LogGroupControlSettings): void;\r\n\r\n  /**\r\n   * Resets everything to original values, for one specific or for all groups.\r\n   */\r\n  reset(id: number | \"all\"): void;\r\n}\r\n\r\nexport class LoggerControlImpl implements LoggerControl {\r\n\r\n  private static _help: string =\r\n`\r\n  help(): void\r\n    ** Shows this help.\r\n\r\n  listFactories(): void\r\n    ** List all registered LoggerFactories with associated log groups with respective ids (ids can be used to target a factory and/or group).\r\n\r\n  showSettings(idFactory: number | \"all\"): void\r\n    ** Show log group settings for idFactory (use listFactories to find id for a LoggerFactory). If idFactory is \"all\" shows all factories.\r\n\r\n  getLoggerFactoryControl(idFactory: number): LoggerFactoryControl\r\n    ** Return LoggerFactoryControl when found for given idFactory or throws Error if invalid or null, get the id by using listFactories()\r\n\r\n  reset(idFactory: number | \"all\"): void\r\n    ** Resets given factory or all factories back to original values.\r\n`;\r\n\r\n  public help(): void {\r\n    /* tslint:disable:no-console */\r\n    console.log(LoggerControlImpl._help);\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public listFactories(): void {\r\n    const rtSettingsFactories = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\r\n    const result = new StringBuilder();\r\n    result.appendLine(\"Registered LoggerFactories (index / name)\");\r\n    for (let i = 0; i < rtSettingsFactories.length; i++) {\r\n      const rtSettingsFactory = rtSettingsFactories[i];\r\n      result.append(\"  \" + i).append(\": \" + rtSettingsFactory.getName() + \"\\n\");\r\n    }\r\n    /* tslint:disable:no-console */\r\n    console.log(result.toString());\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public showSettings(id: number | \"all\" = \"all\"): void {\r\n    const result: Array<TuplePair<number, LoggerFactoryRuntimeSettings>> = [];\r\n\r\n    if (id === \"all\") {\r\n      let idx = 0;\r\n      LoggerControlImpl._getRuntimeSettingsLoggerFactories().forEach((item) => {\r\n        result.push(new TuplePair(idx++, item));\r\n      });\r\n    }\r\n    else {\r\n      const settings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\r\n      if (id >= 0 && id < settings.length) {\r\n        result.push(new TuplePair(id, settings[id]));\r\n      }\r\n      else {\r\n        throw new Error(\"Requested number: \" + id + \" was not found.\");\r\n      }\r\n    }\r\n\r\n    for (const setting of result) {\r\n      /* tslint:disable:no-console */\r\n      console.log(\"  LoggerFactory: \" + setting.y.getName() + \" (id=\" + setting.x + \")\");\r\n      const logGroupRuntimeSettings = setting.y.getLogGroupRuntimeSettings();\r\n      for (let g = 0; g < logGroupRuntimeSettings.length; g++) {\r\n        const groupSetting = logGroupRuntimeSettings[g];\r\n        console.log(\"     LogGroup: (id=\" + g + \")\");\r\n        console.log(\"       RegExp: \" + groupSetting.logGroupRule.regExp.source);\r\n        console.log(\"       Level: \" + LogLevel[groupSetting.level].toString());\r\n        console.log(\"       LoggerType: \" + LoggerType[groupSetting.loggerType].toString());\r\n      }\r\n      /* tslint:enable:no-console */\r\n    }\r\n  }\r\n\r\n  public reset(idFactory: number | \"all\" = \"all\"): void {\r\n    const loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\r\n    let result: LoggerFactoryRuntimeSettings[] = [];\r\n    if (idFactory === \"all\") {\r\n      result = loggerFactoriesSettings;\r\n    }\r\n    else {\r\n      if (idFactory >= 0 && idFactory < loggerFactoriesSettings.length) {\r\n        result.push(loggerFactoriesSettings[idFactory]);\r\n      }\r\n    }\r\n\r\n    result.forEach((setting) => {\r\n      /* tslint:disable:no-console */\r\n      console.log(\"Reset all settings for factory \" + idFactory);\r\n      /* tslint:enable:no-console */\r\n      const control = new LoggerFactoryControlImpl(setting);\r\n      control.reset();\r\n    });\r\n  }\r\n\r\n  public getLoggerFactoryControl(idFactory: number): LoggerFactoryControl {\r\n    const loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\r\n    if (idFactory >= 0 &&  idFactory < loggerFactoriesSettings.length) {\r\n      return new LoggerFactoryControlImpl(loggerFactoriesSettings[idFactory]);\r\n    }\r\n    throw new Error(\"idFactory is invalid (less than 0) or non existing id.\");\r\n  }\r\n\r\n  private static _getRuntimeSettingsLoggerFactories(): LoggerFactoryRuntimeSettings[] {\r\n    return LoggerControlImpl._getSettings().getRuntimeSettingsForLoggerFactories();\r\n  }\r\n\r\n  private static _getSettings(): LFServiceRuntimeSettings {\r\n    return LFService.getRuntimeSettings();\r\n  }\r\n}\r\n\r\nclass LoggerFactoryControlImpl implements LoggerFactoryControl {\r\n\r\n  private static _help: string =\r\n    `\r\n  help(): void\r\n    ** Shows this help.\r\n\r\n  example(): void\r\n    ** Shows an example of usage.\r\n\r\n  showSettings(id: number | \"all\"): void\r\n    ** Prints settings for given group id, \"all\" for all group.\r\n\r\n  change(settings: LogGroupControlSettings): void\r\n    ** Changes the current settings for one or all log groups.\r\n    **\r\n       LogGroupControlSettings, properties of object:\r\n         group: number | \"all\"\r\n           ** Apply to specific group, or \"all\".\r\n           ** Required\r\n\r\n         logLevel: \"Fatal\" | \"Error\" | \"Warn\" | \"Info\" | \"Debug\" | \"Trace\" | undefined\r\n           ** Set log level, undefined will not change the setting.\r\n           ** Optional\r\n\r\n         logFormat: \"Default\" | \"YearMonthDayTime\" | \"YearDayMonthWithFullTime\" | \"YearDayMonthTime\" | undefined\r\n           ** Set the log format, undefined will not change the setting.\r\n           ** Optional\r\n\r\n         showTimestamp: boolean | undefined\r\n           ** Whether to show timestamp, undefined will not change the setting.\r\n           ** Optional\r\n\r\n         showLoggerName: boolean | undefined\r\n           ** Whether to show the logger name, undefined will not change the setting.\r\n           ** Optional\r\n\r\n  reset(id: number | \"all\"): void\r\n    ** Resets everything to original values, for one specific or for all groups.\r\n\r\n  help():\r\n    ** Shows this help.\r\n`;\r\n\r\n  private static _example: string =\r\n    `\r\n  Examples:\r\n    change({group: \"all\", logLevel: \"Info\"})\r\n      ** Change loglevel to Info for all groups.\r\n\r\n    change({group: 1, recursive:false, logLevel: \"Warning\"})\r\n      ** Change logLevel for group 1 to Warn.\r\n\r\n    change({group: \"all\", logLevel: \"Fine\", logFormat: \"YearDayMonthTime\", showTimestamp:false, showLoggerName:false})\r\n      ** Change loglevel to Debug for all groups, apply format, do not show timestamp and logger names.\r\n`;\r\n\r\n  private _settings: LoggerFactoryRuntimeSettings;\r\n\r\n  public constructor(settings: LoggerFactoryRuntimeSettings) {\r\n    this._settings = settings;\r\n  }\r\n\r\n  public help(): void {\r\n    /* tslint:disable:no-console */\r\n    console.log(LoggerFactoryControlImpl._help);\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public example(): void {\r\n    /* tslint:disable:no-console */\r\n    console.log(LoggerFactoryControlImpl._example);\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public showSettings(id: number | \"all\" = \"all\"): void {\r\n    const result = new StringBuilder();\r\n    const logGroupRuntimeSettings = this._settings.getLogGroupRuntimeSettings();\r\n\r\n    result.appendLine(\"Registered LogGroups (index / expression)\");\r\n    for (let i = 0; i < logGroupRuntimeSettings.length; i++) {\r\n      const logGroupRuntimeSetting = logGroupRuntimeSettings[i];\r\n      result.appendLine(\"  \" + i + \": \" + logGroupRuntimeSetting.logGroupRule.regExp.source + \", logLevel=\" +\r\n        LogLevel[logGroupRuntimeSetting.level].toString() + \", showTimestamp=\" + logGroupRuntimeSetting.logFormat.showTimeStamp +\r\n        \", showLoggerName=\" + logGroupRuntimeSetting.logFormat.showLoggerName +\r\n        \", format=\" + DateFormatEnum[logGroupRuntimeSetting.logFormat.dateFormat.formatEnum].toString());\r\n    }\r\n    /* tslint:disable:no-console */\r\n    console.log(result.toString());\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public change(settings: LogGroupControlSettings): void {\r\n\r\n    const logGroupRuntimeSettings = this._getLogGroupRunTimeSettingsFor(settings.group);\r\n\r\n    let logLevel: LogLevel | null = null;\r\n    let formatEnum: DateFormatEnum | null = null;\r\n    let showLoggerName: boolean | null = null;\r\n    let showTimestamp: boolean | null = null;\r\n\r\n    let result: string | null = null;\r\n\r\n    const addResult = (value: string) => {\r\n      if (result !== null) {\r\n        result += \", \";\r\n      }\r\n      if (result === null) {\r\n        result = value;\r\n      }\r\n      else {\r\n        result += value;\r\n      }\r\n    };\r\n\r\n    if (typeof settings.logLevel === \"string\") {\r\n      logLevel = LogLevel.fromString(settings.logLevel);\r\n      addResult(\"logLevel=\" + settings.logLevel);\r\n    }\r\n    if (typeof settings.logFormat === \"string\") {\r\n      formatEnum = DateFormatEnum.fromString(settings.logFormat);\r\n      addResult(\"logFormat=\" + settings.logFormat);\r\n    }\r\n    if (typeof settings.showLoggerName === \"boolean\") {\r\n      showLoggerName = settings.showLoggerName;\r\n      addResult(\"showLoggerName=\" + settings.showLoggerName);\r\n    }\r\n    if (typeof settings.showTimestamp === \"boolean\") {\r\n      showTimestamp = settings.showTimestamp;\r\n      addResult(\"showTimestamp=\" + settings.showTimestamp);\r\n    }\r\n\r\n    logGroupRuntimeSettings.forEach((s) => {\r\n      if (logLevel !== null) {\r\n        s.level = logLevel;\r\n      }\r\n      if (formatEnum !== null) {\r\n        s.logFormat.dateFormat.formatEnum = formatEnum;\r\n      }\r\n      if (showTimestamp !== null) {\r\n        s.logFormat.showTimeStamp = showTimestamp;\r\n      }\r\n      if (showLoggerName !== null) {\r\n        s.logFormat.showLoggerName = showLoggerName;\r\n      }\r\n    });\r\n\r\n    /* tslint:disable:no-console */\r\n    console.log(\"Applied changes: \" + result + \" to log groups '\" + settings.group + \"'.\");\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public reset(idGroup: number | \"all\" = \"all\"): void {\r\n    const settings = this._getLogGroupRunTimeSettingsFor(idGroup);\r\n    for (const setting of settings) {\r\n      setting.level = setting.logGroupRule.level;\r\n      setting.logFormat.showTimeStamp = setting.logGroupRule.logFormat.showTimeStamp;\r\n      setting.logFormat.showLoggerName = setting.logGroupRule.logFormat.showLoggerName;\r\n      setting.logFormat.dateFormat.formatEnum = setting.logGroupRule.logFormat.dateFormat.formatEnum;\r\n    }\r\n    /* tslint:disable:no-console */\r\n    console.log(\"Reset all settings for group \" + idGroup);\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  private _getLogGroupRunTimeSettingsFor(idGroup: number | \"all\"): LogGroupRuntimeSettings[] {\r\n    let settings: LogGroupRuntimeSettings[] = [];\r\n    if (idGroup === \"all\") {\r\n      settings = this._settings.getLogGroupRuntimeSettings();\r\n    }\r\n    else {\r\n      this._checkIndex(idGroup);\r\n      settings.push(this._settings.getLogGroupRuntimeSettings()[idGroup]);\r\n    }\r\n    return settings;\r\n  }\r\n\r\n  private _checkIndex(index: number): void {\r\n    if (index < 0 || index >= this._settings.getLogGroupRuntimeSettings().length) {\r\n      throw new Error(\"Invalid index, use listLogGroups to find out a valid one.\");\r\n    }\r\n  }\r\n}\r\n","import {CategoryServiceImpl} from \"../log/category/CategoryService\";\r\nimport {DateFormatEnum, LoggerType, LogLevel} from \"../log/LoggerOptions\";\r\nimport {StringBuilder} from \"../utils/DataStructures\";\r\nimport {Category} from \"../log/category/Category\";\r\n\r\n/**\r\n * Allows to change the settings for one or all Categories.\r\n * Options will be applied only if set, undefined options are ignored.\r\n *\r\n * The only properties required are recursive (to apply recursively to child categories or not) and idCategory.\r\n */\r\nexport interface CategoryServiceControlSettings {\r\n\r\n  /**\r\n   * Apply to child categories (true) or not.\r\n   */\r\n  recursive: boolean;\r\n\r\n  /**\r\n   * Apply to specific category, or \"all\".\r\n   */\r\n  category: number | \"all\";\r\n\r\n  /**\r\n   * Set log level, undefined will not change the setting.\r\n   */\r\n  logLevel: \"Severe\" | \"Warning\" | \"Info\" | \"Config\" | \"Fine\" | \"Finer\" | \"Finest\" | undefined;\r\n\r\n  /**\r\n   * Set the log format, undefined will not change the setting.\r\n   */\r\n  logFormat: \"Default\" | \"YearMonthDayTime\" | \"YearDayMonthWithFullTime\" | \"YearDayMonthTime\" | undefined;\r\n\r\n  /**\r\n   * Whether to show timestamp, undefined will not change the setting.\r\n   */\r\n  showTimestamp: boolean | undefined;\r\n\r\n  /**\r\n   * Whether to show the category name, undefined will not change the setting.\r\n   */\r\n  showCategoryName: boolean | undefined;\r\n}\r\n\r\n/**\r\n * Interface to control CategoryService and relatedm, through\r\n * ordinary console in browsers.\r\n */\r\nexport interface CategoryServiceControl {\r\n\r\n  /**\r\n   * Shows help\r\n   */\r\n  help(): void;\r\n\r\n  /**\r\n   * Shows an example of usage.\r\n   */\r\n  example(): void;\r\n\r\n  /**\r\n   * Prints settings for given category id, when \"all\" for all categories.\r\n   */\r\n  showSettings(id: number | \"all\"): void;\r\n\r\n  /**\r\n   * Apply new settings, see CategoryServiceControlSettings for details.\r\n   * @param settings Settings to set\r\n   */\r\n  change(settings: CategoryServiceControlSettings): void;\r\n\r\n  /**\r\n   * Resets everything to original values, for one specific or for all categories.\r\n   */\r\n  reset(id: number | \"all\"): void;\r\n}\r\n\r\n/**\r\n * Implementation class for CategoryServiceControl.\r\n */\r\nexport class CategoryServiceControlImpl implements CategoryServiceControl {\r\n\r\n  private static _help: string =\r\n    `\r\n  help(): void\r\n    ** Shows this help.\r\n\r\n  example(): void\r\n    ** Shows an example on how to use this.\r\n\r\n  showSettings(id: number | \"all\" = \"all\"): void\r\n    ** Shows settings for a specific category, or for all. The id of categories can be found by calling this method without parameter.\r\n\r\n  change(settings: CategoryServiceControlSettings): void\r\n    ** Changes the current settings for one or all categories.\r\n    **\r\n       CategoryServiceControlSettings, properties of object:\r\n         category: number | \"all\"\r\n           ** Apply to specific category, or \"all\".\r\n           ** Required\r\n\r\n         recursive: boolean\r\n           ** Apply to child categories (true) or not.\r\n           ** Required\r\n\r\n         logLevel: \"Fatal\" | \"Error\" | \"Warn\" | \"Info\" | \"Debug\" | \"Trace\" | undefined\r\n           ** Set log level, undefined will not change the setting.\r\n           ** Optional\r\n\r\n         logFormat: \"Default\" | \"YearMonthDayTime\" | \"YearDayMonthWithFullTime\" | \"YearDayMonthTime\" | undefined\r\n           ** Set the log format, undefined will not change the setting.\r\n           ** Optional\r\n\r\n         showTimestamp: boolean | undefined\r\n           ** Whether to show timestamp, undefined will not change the setting.\r\n           ** Optional\r\n\r\n         showCategoryName: boolean | undefined\r\n           ** Whether to show the category name, undefined will not change the setting.\r\n           ** Optional\r\n\r\n   reset(id: number | \"all\"): void\r\n     ** Resets everything to original values, for one specific or for all categories.\r\n`;\r\n\r\n  private static _example: string =\r\n`\r\n  Examples:\r\n    change({category: \"all\", recursive:true, logLevel: \"Info\"})\r\n      ** Change loglevel to Info for all categories, apply to child categories as well.\r\n\r\n    change({category: 1, recursive:false, logLevel: \"Warn\"})\r\n      ** Change logLevel for category 1, do not recurse.\r\n\r\n    change({category: \"all\", recursive:true, logLevel: \"Debug\", logFormat: \"YearDayMonthTime\", showTimestamp:false, showCategoryName:false})\r\n      ** Change loglevel to Debug for all categories, apply format, do not show timestamp and category names - recursively to child categories.\r\n\r\n`;\r\n\r\n  public help(): void {\r\n    /* tslint:disable:no-console */\r\n    console.log(CategoryServiceControlImpl._help);\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public example(): void {\r\n    /* tslint:disable:no-console */\r\n    console.log(CategoryServiceControlImpl._example);\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public showSettings(id: number | \"all\" = \"all\"): void {\r\n    const result = new StringBuilder();\r\n    const service = CategoryServiceControlImpl._getCategoryService();\r\n    const categories = CategoryServiceControlImpl._getCategories(id);\r\n\r\n    categories.forEach((category) => {\r\n      CategoryServiceControlImpl._processCategory(service, category, result, 0);\r\n    });\r\n\r\n    /* tslint:disable:no-console */\r\n    console.log(result.toString());\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public change(settings: CategoryServiceControlSettings): void {\r\n    const service = CategoryServiceControlImpl._getCategoryService();\r\n    const categories = CategoryServiceControlImpl._getCategories(settings.category);\r\n\r\n    let logLevel: LogLevel | null = null;\r\n    let formatEnum: DateFormatEnum | null = null;\r\n    let showCategoryName: boolean | null = null;\r\n    let showTimestamp: boolean | null = null;\r\n\r\n    let result: string | null = null;\r\n\r\n    const addResult = (value: string) => {\r\n      if (result !== null) {\r\n        result += \", \";\r\n      }\r\n      if (result === null) {\r\n        result = value;\r\n      }\r\n      else {\r\n        result += value;\r\n      }\r\n    };\r\n\r\n    addResult(\"recursive=\" + settings.recursive);\r\n\r\n    if (typeof settings.logLevel === \"string\") {\r\n      logLevel = LogLevel.fromString(settings.logLevel);\r\n      addResult(\"logLevel=\" + settings.logLevel);\r\n    }\r\n    if (typeof settings.logFormat === \"string\") {\r\n      formatEnum = DateFormatEnum.fromString(settings.logFormat);\r\n      addResult(\"logFormat=\" + settings.logFormat);\r\n    }\r\n    if (typeof settings.showCategoryName === \"boolean\") {\r\n      showCategoryName = settings.showCategoryName;\r\n      addResult(\"showCategoryName=\" + settings.showCategoryName);\r\n    }\r\n    if (typeof settings.showTimestamp === \"boolean\") {\r\n      showTimestamp = settings.showTimestamp;\r\n      addResult(\"showTimestamp=\" + settings.showTimestamp);\r\n    }\r\n\r\n    const applyChanges = (cat: Category) => {\r\n      const categorySettings = service.getCategorySettings(cat);\r\n      // Should not happen but make tslint happy\r\n      if (categorySettings !== null) {\r\n        if (logLevel !== null) {\r\n          categorySettings.logLevel = logLevel;\r\n        }\r\n        if (formatEnum !== null) {\r\n          categorySettings.logFormat.dateFormat.formatEnum = formatEnum;\r\n        }\r\n        if (showTimestamp !== null) {\r\n          categorySettings.logFormat.showTimeStamp = showTimestamp;\r\n        }\r\n        if (showCategoryName !== null) {\r\n          categorySettings.logFormat.showCategoryName = showCategoryName;\r\n        }\r\n      }\r\n    };\r\n    categories.forEach((cat) => CategoryServiceControlImpl._applyToCategory(cat, settings.recursive, applyChanges));\r\n\r\n    /* tslint:disable:no-console */\r\n    console.log(\"Applied changes: \" + result + \" to categories '\" + settings.category + \"'.\");\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  public reset(id: number | \"all\" = \"all\"): void {\r\n    const service = CategoryServiceControlImpl._getCategoryService();\r\n    const categories = CategoryServiceControlImpl._getCategories(id);\r\n\r\n    const applyChanges = (cat: Category) => {\r\n      const categorySettings = service.getCategorySettings(cat);\r\n      const original = service.getOriginalCategorySettings(cat);\r\n\r\n      // Should not happen but make tslint happy\r\n      if (categorySettings !== null && original !== null) {\r\n        categorySettings.logLevel = original.logLevel;\r\n        categorySettings.logFormat.dateFormat.formatEnum = original.logFormat.dateFormat.formatEnum;\r\n        categorySettings.logFormat.showTimeStamp = original.logFormat.showTimeStamp;\r\n        categorySettings.logFormat.showCategoryName = original.logFormat.showCategoryName;\r\n      }\r\n    };\r\n\r\n    categories.forEach((cat) => CategoryServiceControlImpl._applyToCategory(cat, true, applyChanges));\r\n\r\n    /* tslint:disable:no-console */\r\n    console.log(\"Applied reset to category: \" + id + \".\");\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  private static _processCategory(service: CategoryServiceImpl, category: Category, result: StringBuilder, indent: number): void {\r\n    const settings = service.getCategorySettings(category);\r\n    if (settings !== null) {\r\n      result.append(\"  \" + category.id + \": \");\r\n      if (indent > 0) {\r\n        for (let i = 0; i < indent; i++) {\r\n          result.append(\"  \");\r\n        }\r\n      }\r\n      result.append(category.name + \" (\" + LogLevel[settings.logLevel].toString() + \"@\" + LoggerType[settings.loggerType].toString() + \")\\n\");\r\n\r\n      if (category.children.length > 0) {\r\n        category.children.forEach((child) => {\r\n          CategoryServiceControlImpl._processCategory(service, child, result, indent + 1);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private static _applyToCategory(category: Category, recursive: boolean, apply: (cat: Category) => void) {\r\n    apply(category);\r\n    if (recursive) {\r\n      category.children.forEach((child) => {\r\n        CategoryServiceControlImpl._applyToCategory(child, recursive, apply);\r\n      });\r\n    }\r\n  }\r\n\r\n  private static _getCategoryService(): CategoryServiceImpl {\r\n    return CategoryServiceImpl.getInstance();\r\n  }\r\n\r\n  private static _getCategories(idCategory: number | \"all\"): Category[] {\r\n    const service = CategoryServiceControlImpl._getCategoryService();\r\n\r\n    let categories: Category[] = [];\r\n    if (idCategory === \"all\") {\r\n      categories = service.getRootCategories();\r\n    }\r\n    else {\r\n      const category = service.getCategoryById(idCategory);\r\n      if (category === null) {\r\n        throw new Error(\"Failed to find category with id \" + idCategory);\r\n      }\r\n      categories.push(category);\r\n    }\r\n    return categories;\r\n  }\r\n\r\n}\r\n","import {LogLevel} from \"../LoggerOptions\";\r\nimport {CategoryLogger} from \"./CategoryLogger\";\r\nimport {CategoryServiceImpl} from \"./CategoryService\";\r\nimport {ErrorType, MessageType} from \"../standard/Logger\";\r\n\r\n/**\r\n * Category for use with categorized logging.\r\n * At minimum you need one category, which will serve as the root category.\r\n * You can create child categories (like a tree). You can have multiple root\r\n * categories.\r\n */\r\nexport class Category implements CategoryLogger {\r\n\r\n  private static currentId: number = 1;\r\n\r\n  private _id: number;\r\n\r\n  private _name: string;\r\n  private _parent: Category | null;\r\n  private _children: Category[] = [];\r\n  private _logLevel: LogLevel = LogLevel.Warning;\r\n\r\n  // Assigned lazily (on demand)\r\n  private _logger!: CategoryLogger;\r\n\r\n  public constructor(name: string, parent: Category | null = null) {\r\n    if (name.indexOf(\"#\") !== -1) {\r\n      throw new Error(\"Cannot use # in a name of a Category\");\r\n    }\r\n\r\n    this._id = Category.nextId();\r\n    this._name = name;\r\n    this._parent = parent;\r\n    if (this._parent !== null) {\r\n      this._parent._children.push(this);\r\n    }\r\n    CategoryServiceImpl.getInstance().registerCategory(this);\r\n  }\r\n\r\n  public get name(): string {\r\n    return this._name;\r\n  }\r\n\r\n  public get parent(): Category | null {\r\n    return this._parent;\r\n  }\r\n\r\n  public get children(): Category[] {\r\n    return this._children;\r\n  }\r\n\r\n  public get logLevel(): LogLevel {\r\n    return this._logLevel;\r\n  }\r\n\r\n  public finest(msg: MessageType, ...categories: Category[]): void {\r\n    this.loadCategoryLogger();\r\n    this._logger.finest(msg, ...categories);\r\n  }\r\n\r\n  public finer(msg: MessageType, ...categories: Category[]): void {\r\n    this.loadCategoryLogger();\r\n    this._logger.finer(msg, ...categories);\r\n  }\r\n\r\n  public fine(msg: MessageType, ...categories: Category[]): void {\r\n    this.loadCategoryLogger();\r\n    this._logger.fine(msg, ...categories);\r\n  }\r\n\r\n  public config(msg: MessageType, ...categories: Category[]): void {\r\n    this.loadCategoryLogger();\r\n    this._logger.config(msg, ...categories);\r\n  }\r\n\r\n  public info(msg: MessageType, ...categories: Category[]): void {\r\n    this.loadCategoryLogger();\r\n    this._logger.info(msg, ...categories);\r\n  }\r\n\r\n  public warning(msg: MessageType, error: ErrorType, ...categories: Category[]): void {\r\n    this.loadCategoryLogger();\r\n    this._logger.warning(msg, error, ...categories);\r\n  }\r\n\r\n  public severe(msg: MessageType, error: ErrorType, ...categories: Category[]): void {\r\n    this.loadCategoryLogger();\r\n    this._logger.severe(msg, error, ...categories);\r\n  }\r\n\r\n  public resolved(msg: MessageType, error: ErrorType, ...categories: Category[]): void {\r\n    this.loadCategoryLogger();\r\n    this._logger.resolved(msg, error, ...categories);\r\n  }\r\n\r\n  public log(level: LogLevel, msg: MessageType, error: ErrorType, ...categories: Category[]): void {\r\n    this.loadCategoryLogger();\r\n    this._logger.log(level, msg, error, ...categories);\r\n  }\r\n\r\n  public getCategoryPath(): string {\r\n    let result = this.name;\r\n    let cat: Category | null = this.parent;\r\n\r\n    while (cat != null) {\r\n      result = cat.name + \"#\" + result;\r\n      cat = cat.parent;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns the id for this category (this\r\n   * is for internal purposes only).\r\n   * @returns {number} Id\r\n   */\r\n  public get id(): number {\r\n    return this._id;\r\n  }\r\n\r\n  private loadCategoryLogger() {\r\n    if (!this._logger) {\r\n      this._logger = CategoryServiceImpl.getInstance().getLogger(this);\r\n    }\r\n\r\n    if (typeof this._logger === \"undefined\" || this._logger === null) {\r\n      throw new Error(\"Failed to load a logger for category (should not happen): \" + this.name);\r\n    }\r\n  }\r\n\r\n  private static nextId(): number {\r\n    return Category.currentId++;\r\n  }\r\n}\r\n","import {CategoryLogger} from \"./CategoryLogger\";\r\nimport {Category} from \"./Category\";\r\nimport {RuntimeSettings} from \"./RuntimeSettings\";\r\nimport {CategoryConfiguration} from \"./CategoryConfiguration\";\r\nimport {CategoryServiceImpl} from \"./CategoryService\";\r\n\r\n/**\r\n * Categorized service for logging, where logging is bound to categories which\r\n * can log horizontally through specific application logic (services, group(s) of components etc).\r\n * For the standard way of logging like most frameworks do these days, use LFService instead.\r\n * If you want fine grained control to divide sections of your application in\r\n * logical units to enable/disable logging for, this is the service you want to use instead.\r\n * Also for this type a browser plugin will be available.\r\n */\r\nexport class CategoryServiceFactory {\r\n\r\n  private constructor() {\r\n    // Private constructor.\r\n  }\r\n\r\n  /**\r\n   * Return a CategoryLogger for given ROOT category (thus has no parent).\r\n   * You can only retrieve loggers for their root, when logging\r\n   * you specify to log for what (child)categories.\r\n   * @param root Category root (has no parent)\r\n   * @returns {CategoryLogger}\r\n   */\r\n  public static getLogger(root: Category): CategoryLogger {\r\n    return CategoryServiceImpl.getInstance().getLogger(root);\r\n  }\r\n\r\n  /**\r\n   * Clears everything, any registered (root)categories and loggers\r\n   * are discarded. Resets to default configuration.\r\n   */\r\n  public static clear() {\r\n    return CategoryServiceImpl.getInstance().clear();\r\n  }\r\n\r\n  /**\r\n   * Set the default configuration. New root loggers created get this\r\n   * applied. If you want to reset all current loggers to have this\r\n   * applied as well, pass in reset=true (the default is false). All\r\n   * categories runtimesettings will be reset then as well.\r\n   * @param config The new default configuration\r\n   * @param reset If true, will reset *all* runtimesettings for all loggers/categories to these. Default is true.\r\n   */\r\n  public static setDefaultConfiguration(config: CategoryConfiguration, reset: boolean = true): void {\r\n    CategoryServiceImpl.getInstance().setDefaultConfiguration(config, reset);\r\n  }\r\n\r\n  /**\r\n   * Set new configuration settings for a category (and possibly its child categories)\r\n   * @param config Config\r\n   * @param category Category\r\n   * @param applyChildren True to apply to child categories, defaults to false.\r\n   */\r\n  public static setConfigurationCategory(config: CategoryConfiguration, category: Category, applyChildren: boolean = false): void {\r\n    CategoryServiceImpl.getInstance().setConfigurationCategory(config, category, applyChildren);\r\n  }\r\n}\r\n","/**\r\n * Module containing bunch of JSON related stuff.\r\n */\r\nimport {LogLevel} from \"../log/LoggerOptions\";\r\nimport {SimpleMap, StringBuilder} from \"./DataStructures\";\r\nimport {Category} from \"../log/category/Category\";\r\n\r\nexport interface JSONType<T> {\r\n\r\n  getValue(): T;\r\n  toString(): string;\r\n\r\n}\r\n\r\nexport type ArrayType = boolean | string | number | JSONObject | null;\r\n\r\nabstract class JSONTypeImpl<T> implements JSONType<T> {\r\n\r\n  private _value: T;\r\n\r\n  constructor(value: T) {\r\n    this._value = value;\r\n  }\r\n\r\n  public getValue(): T {\r\n    return this._value;\r\n  }\r\n\r\n  public toString(): string {\r\n    const value = this.getValue();\r\n    if (value != null) {\r\n      return value.toString();\r\n    }\r\n    return \"null\";\r\n  }\r\n\r\n}\r\n\r\nclass JSONBooleanType extends JSONTypeImpl<boolean> {\r\n\r\n  constructor(value: boolean) {\r\n    super(value);\r\n  }\r\n}\r\n\r\nclass JSONNumberType extends JSONTypeImpl<number> {\r\n\r\n  constructor(value: number) {\r\n    super(value);\r\n  }\r\n\r\n}\r\n\r\nclass JSONStringType extends JSONTypeImpl<string> {\r\n\r\n  constructor(value: string) {\r\n    super(value);\r\n  }\r\n\r\n  public toString(): string {\r\n    const value = this.getValue();\r\n    if (value != null) {\r\n      return JSON.stringify(value.toString());\r\n    }\r\n    return \"null\";\r\n  }\r\n}\r\n\r\nclass JSONObjectType extends JSONTypeImpl<JSONObject> {\r\n\r\n  constructor(value: JSONObject) {\r\n    super(value);\r\n  }\r\n}\r\n\r\nclass JSONArrayType extends JSONTypeImpl<JSONArray<ArrayType>> {\r\n\r\n  constructor(value: JSONArray<ArrayType>) {\r\n    super(value);\r\n  }\r\n\r\n  public toString(): string {\r\n    const value = this.getValue();\r\n    if (value != null) {\r\n      return value.toString();\r\n    }\r\n    return \"null\";\r\n  }\r\n}\r\n\r\nclass JSONNullType extends JSONTypeImpl<null> {\r\n\r\n  constructor() {\r\n    super(null);\r\n  }\r\n\r\n  public toString(): string {\r\n    return \"null\";\r\n  }\r\n}\r\n\r\nclass JSONTypeConverter {\r\n\r\n  public static toJSONType(value: ArrayType): JSONType<ArrayType> {\r\n    if (value === null) {\r\n      return new JSONNullType();\r\n    }\r\n    if (typeof value === \"string\") {\r\n      return new JSONStringType(value);\r\n    }\r\n    if (typeof value === \"number\") {\r\n      return new JSONNumberType(value);\r\n    }\r\n    if (typeof value === \"boolean\") {\r\n      return new JSONBooleanType(value);\r\n    }\r\n    if (value instanceof JSONObject) {\r\n      return new JSONObjectType(value);\r\n    }\r\n    throw new Error(\"Type not supported for value: \" + value);\r\n  }\r\n}\r\n\r\nexport class JSONObject {\r\n\r\n  private values: SimpleMap<JSONTypeImpl<any>> = new SimpleMap<JSONTypeImpl<any>>();\r\n\r\n  public addBoolean(name: string, value: boolean): JSONObject {\r\n    this.checkName(name);\r\n    JSONObject.checkValue(value);\r\n    this.values.put(name, new JSONBooleanType(value));\r\n    return this;\r\n  }\r\n\r\n  public addNumber(name: string, value: number): JSONObject {\r\n    this.checkName(name);\r\n    JSONObject.checkValue(value);\r\n    this.values.put(name, new JSONNumberType(value));\r\n    return this;\r\n  }\r\n\r\n  public addString(name: string, value: string): JSONObject {\r\n    this.checkName(name);\r\n    JSONObject.checkValue(value);\r\n    this.values.put(name, new JSONStringType(value));\r\n    return this;\r\n  }\r\n\r\n  public addNull(name: string): JSONObject {\r\n    this.checkName(name);\r\n    this.values.put(name, new JSONNullType());\r\n    return this;\r\n  }\r\n\r\n  public addArray(name: string, array: JSONArray<ArrayType>): JSONObject {\r\n    this.checkName(name);\r\n    JSONObject.checkValue(array);\r\n    if (array == null) {\r\n      throw new Error(\"Cannot add array as null\");\r\n    }\r\n    this.values.put(name, new JSONArrayType(array));\r\n    return this;\r\n  }\r\n\r\n  public addObject(name: string, object: JSONObject): JSONObject {\r\n    this.checkName(name);\r\n    JSONObject.checkValue(object);\r\n    if (object == null) {\r\n      throw new Error(\"Cannot add object as null\");\r\n    }\r\n    this.values.put(name, new JSONObjectType(object));\r\n    return this;\r\n  }\r\n\r\n  public toString(pretty: boolean = false): string {\r\n    let comma = false;\r\n    const buffer = new StringBuilder();\r\n    buffer.append(\"{\");\r\n    this.values.keys().forEach((key: string) => {\r\n      const value = this.values.get(key);\r\n      if (value != null) {\r\n        if (comma) {\r\n          buffer.append(\",\");\r\n        }\r\n\r\n        buffer.append('\"').append(key).append('\":').append(value.toString());\r\n        comma = true;\r\n      }\r\n    });\r\n    buffer.append(\"}\");\r\n    return buffer.toString();\r\n  }\r\n\r\n  private checkName(name: string): void {\r\n    if (name == null || name === undefined) {\r\n      throw new Error(\"Name is null or undefined\");\r\n    }\r\n    if (this.values.exists(name)) {\r\n      throw new Error(\"Name \" + name + \" is already present for this object\");\r\n    }\r\n  }\r\n\r\n  private static checkValue(value: any): void {\r\n    if (value === undefined) {\r\n      throw new Error(\"Value is undefined\");\r\n    }\r\n  }\r\n}\r\n\r\nexport class JSONArray<T extends ArrayType> {\r\n\r\n  private objects: Array<JSONType<ArrayType>> = [];\r\n\r\n  public add(object: T): JSONArray<T> {\r\n    if (object === undefined) {\r\n      throw new Error(\"Object is not allowed to be undefined\");\r\n    }\r\n    this.objects.push(JSONTypeConverter.toJSONType(object));\r\n    return this;\r\n  }\r\n\r\n  public toString(pretty: boolean = false): string {\r\n    const buffer = new StringBuilder();\r\n    buffer.append(\"[\");\r\n    this.objects.forEach((value, index) => {\r\n      if (index > 0) {\r\n        buffer.append(\",\");\r\n      }\r\n      buffer.append(value.toString());\r\n    });\r\n    buffer.append(\"]\");\r\n\r\n    return buffer.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * Utility class that helps us convert things to and from json (not for normal usage).\r\n */\r\nexport class JSONHelper {\r\n\r\n  public static categoryToJSON(cat: Category, recursive: boolean): JSONObject {\r\n    /*\r\n     {\r\n     \"categories\":\r\n     [\r\n     { id=1,\r\n     name: \"x\",\r\n     parent: null,\r\n     logLevel: \"Error\"\r\n     },\r\n     { id=2,\r\n     name: \"y\",\r\n     parent: 1,\r\n     logLevel: \"Error\"\r\n     }\r\n     ]\r\n     }\r\n     */\r\n\r\n    const arr = new JSONArray<JSONObject>();\r\n    JSONHelper._categoryToJSON(cat, arr, recursive);\r\n    const object = new JSONObject();\r\n    object.addArray(\"categories\", arr);\r\n    return object;\r\n  }\r\n\r\n  private static _categoryToJSON(cat: Category, arr: JSONArray<JSONObject>, recursive: boolean): void {\r\n    const object = new JSONObject();\r\n    object.addNumber(\"id\", cat.id);\r\n    object.addString(\"name\", cat.name);\r\n    object.addString(\"logLevel\", LogLevel[cat.logLevel].toString());\r\n    if (cat.parent != null) {\r\n      object.addNumber(\"parent\", cat.parent.id);\r\n    }\r\n    else {\r\n      object.addNull(\"parent\");\r\n    }\r\n\r\n    arr.add(object);\r\n\r\n    if (recursive) {\r\n      cat.children.forEach((child: Category) => {\r\n        JSONHelper._categoryToJSON(child, arr, recursive);\r\n      });\r\n    }\r\n  }\r\n}\r\n","import {ExtensionHelper} from \"./extension/ExtensionHelper\";\r\nimport {LoggerControl, LoggerControlImpl} from \"./control/LogGroupControl\";\r\nimport {CategoryServiceControl, CategoryServiceControlImpl} from \"./control/CategoryServiceControl\";\r\n\r\n// Public stuff we export for extension\r\nexport * from \"./extension/MessagesToExtensionJSON\";\r\nexport * from \"./extension/MessagesFromExtensionJSON\";\r\nexport * from \"./extension/ExtensionMessageJSON\";\r\nexport {ExtensionHelper} from \"./extension/ExtensionHelper\";\r\n\r\n// Category related\r\nexport {AbstractCategoryLogger, CategoryLogMessage} from \"./log/category/AbstractCategoryLogger\";\r\nexport {CategoryConsoleLoggerImpl} from \"./log/category/CategoryConsoleLoggerImpl\";\r\nexport {CategoryDelegateLoggerImpl} from \"./log/category/CategoryDelegateLoggerImpl\";\r\nexport {Category} from \"./log/category/Category\";\r\nexport {CategoryLogger} from \"./log/category/CategoryLogger\";\r\nexport {CategoryRuntimeSettings} from \"./log/category/CategoryRuntimeSettings\";\r\nexport {CategoryConfiguration} from \"./log/category/CategoryConfiguration\";\r\nexport {RuntimeSettings} from \"./log/category/RuntimeSettings\";\r\nexport {CategoryMessageBufferLoggerImpl} from \"./log/category/CategoryMessageBufferImpl\";\r\nexport {CategoryServiceFactory} from \"./log/category/CategoryServiceFactory\";\r\n\r\n// LoggerFactory related.\r\nexport {Logger, MessageType, ErrorType} from \"./log/standard/Logger\";\r\nexport {LoggerFactory} from \"./log/standard/LoggerFactory\";\r\nexport {LoggerFactoryOptions} from \"./log/standard/LoggerFactoryOptions\";\r\nexport {LogGroupRule} from \"./log/standard/LogGroupRule\";\r\nexport {LFService} from \"./log/standard/LFService\";\r\nexport {AbstractLogger, LogMessage} from \"./log/standard/AbstractLogger\";\r\nexport {ConsoleLoggerImpl} from \"./log/standard/ConsoleLoggerImpl\";\r\nexport {MessageBufferLoggerImpl} from \"./log/standard/MessageBufferLoggerImpl\";\r\nexport {CategoryLogFormat, DateFormat, DateFormatEnum, LogFormat, LoggerType, LogLevel} from \"./log/LoggerOptions\";\r\nexport {LogData} from \"./log/LogData\";\r\n\r\n// Console controller related\r\nexport {CategoryServiceControl, CategoryServiceControlSettings} from \"./control/CategoryServiceControl\";\r\nexport {LoggerControl, LoggerFactoryControl, LogGroupControlSettings} from \"./control/LogGroupControl\";\r\n\r\n// Utilities\r\nexport {SimpleMap, LinkedList} from \"./utils/DataStructures\";\r\nexport * from \"./utils/JSONHelper\";\r\nexport {MessageFormatUtils} from \"./utils/MessageUtils\";\r\n\r\n/*\r\n Functions to export on TSL libarary var.\r\n*/\r\n\r\n// Export help function\r\nexport function help(): void {\r\n  /* tslint:disable:no-console */\r\n  console.log(\r\n`help()\r\n   ** Shows this help\r\n\r\n getLogControl(): LoggerControl\r\n   ** Returns LoggerControl Object, use to dynamically change loglevels for log4j logging.\r\n   ** Call .help() on LoggerControl object for available options.\r\n\r\n getCategoryControl(): CategoryServiceControl\r\n   ** Returns CategoryServiceControl Object, use to dynamically change loglevels for category logging.\r\n   ** Call .help() on CategoryServiceControl object for available options.\r\n`\r\n  );\r\n  /* tslint:enable:no-console */\r\n}\r\n\r\n// Export LogControl function (log4j)\r\nexport function getLogControl(): LoggerControl {\r\n  return new LoggerControlImpl();\r\n}\r\n\r\n// Export CategoryControl function\r\nexport function getCategoryControl(): CategoryServiceControl {\r\n  return new CategoryServiceControlImpl();\r\n}\r\n"],"names":["LogLevel","LoggerType","DateFormatEnum","val","Error","toLowerCase","Finest","Finer","Fine","Config","Info","Warning","Severe","Default","YearMonthDayTime","YearDayMonthWithFullTime","YearDayMonthTime","Object","DateFormat","this","_formatEnum","value","_dateSeparator","formatEnum","dateSeparator","LogFormat","_dateFormat","_showTimeStamp","_showLoggerName","dateFormat","showTimeStamp","showLoggerName","CategoryLogFormat","_showCategoryName","copy","showCategoryName","LinkedNode","_previous","_next","_value","LinkedList","createHeadIfNeeded","head","nextNode","next","newHeadNode","previous","size","oldTailNode","getTailNode","newTailNode","oldHead","node","previousNode","f","recurse","fn","values","push","result","currentNode","SimpleMap","key","array","keys","hasOwnProperty","get","length","cbFunction","count","TuplePair","_x","_y","x","y","StringBuilder","line","undefined","data","separator","join","_isNumber","n","isNaN","parseFloat","isFinite","StackFrame","functionName","args","fileName","lineNumber","columnNumber","source","setFunctionName","setArgs","setFileName","setLineNumber","setColumnNumber","setSource","module","prototype","getFunctionName","v","String","getArgs","toString","call","TypeError","getFileName","getLineNumber","Number","getColumnNumber","getSource","_map","thisArg","Array","map","output","i","_filter","filter","FIREFOX_SAFARI_STACK_REGEXP","CHROME_IE_STACK_REGEXP","SAFARI_NATIVE_CODE_REGEXP","require$$0","parse","error","stacktrace","parseOpera","stack","match","parseV8OrIE","parseFFOrSafari","extractLocation","urlLike","indexOf","parts","exec","replace","filtered","split","tokens","slice","locationParts","pop","target","_indexOf","e","message","parseOpera9","parseOpera11","parseOpera10","lineRE","lines","len","argsRaw","functionCall","shift","_capitalize","str","charAt","toUpperCase","substring","_getter","p","booleanProps","numericProps","stringProps","props","concat","obj","getEvalOrigin","evalOrigin","setEvalOrigin","Boolean","j","k","factory","backtrace","opts","maxStackSize","curr","arguments","callee","test","RegExp","$1","caller","exports","aArgs","aName","aDefaultValue","urlRegexp","dataUrlRegexp","urlParse","aUrl","scheme","auth","host","port","path","urlGenerate","aParsedUrl","url","normalize","aPath","part","isAbsolute","up","splice","aRoot","aPathUrl","aRootUrl","joined","level","index","lastIndexOf","substr","supportsNullProto","create","identity","s","isProtoString","charCodeAt","strcmp","aStr1","aStr2","aStr","mappingA","mappingB","onlyCompareOriginal","cmp","originalLine","originalColumn","generatedColumn","generatedLine","name","onlyCompareGenerated","aNeedle","aHaystack","aCompare","aBias","recursiveSearch","aLow","aHigh","mid","Math","floor","LEAST_UPPER_BOUND","GREATEST_LOWER_BOUND","has","ArraySet","_array","_set","fromArray","aArray","aAllowDuplicates","set","add","getOwnPropertyNames","sStr","util","toSetString","isDuplicate","idx","at","aIdx","toArray","charCode","aIndex","aOutParam","continuation","digit","strLen","base64","VLQ_BASE","aValue","shifted","fromVLQSigned","rest","swap","ary","temp","doQuickSort","comparator","r","low","high","round","random","randomIntInRange","pivot","q","quickSort","SourceMapConsumer","aSourceMap","sourceMap","JSON","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","fromSourceMap","_version","__generatedMappings","defineProperty","_parseMappings","_mappings","sourceRoot","__originalMappings","_charIsMappingSeparator","c","aSourceRoot","GENERATED_ORDER","ORIGINAL_ORDER","eachMapping","aCallback","aContext","aOrder","mappings","context","_generatedMappings","_originalMappings","mapping","_sources","_names","forEach","allGeneratedPositionsFor","getArg","needle","relative","_findMapping","compareByOriginalPositions","binarySearch","column","lastColumn","version","sources","names","sourcesContent","file","Mapping","consumer","smc","_sourceRoot","_generateSourcesContent","_file","generatedMappings","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","segment","end","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","originalMappings","base64VLQ","compareByGeneratedPositionsDeflated","aMappings","aLineName","aColumnName","aComparator","search","computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","hasContentsOfAllSources","some","sc","sourceContentFor","aSource","nullOnMissing","fileUriAbsPath","generatedPositionFor","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","constructor","sectionIndex","section","bias","every","content","generatedPosition","sectionMappings","adjustedMapping","_xdr","Promise","resolve","reject","req","XMLHttpRequest","open","onerror","onreadystatechange","readyState","status","responseText","send","_atob","b64str","window","atob","_ensureStackFrameIsLegit","stackframe","SourceMap","require$$1","StackTraceGPS","sourceCache","ajax","_get","location","isDataUrl","offline","sourceMapStart","encodedSource","xhrPromise","method","then","bind","pinpoint","getMappedLocation","mappedStackFrame","resolveMappedStackFrame","findFunctionName","guessedFunctionName","m","reFunctionDeclaration","reFunctionExpression","reFunctionEvaluation","code","maxLines","min","commentPos","_findFunctionName","_ensureSupportedEnvironment","sourceMappingURL","_findSourceMappingURL","base","string","_parseJson","rawSourceMap","mapConsumer","loc","mappedSource","_extractLocationInfoFromSourceMap","_merge","first","second","prop","_isShapedLikeParsableError","err","_filtered","stackframes","ErrorStackParser","StackGenerator","_options","_generateError","require$$2","fromError","generateArtificially","getSync","gps","all","sf","resolveOriginal","stackFrames","instrument","callback","errback","__stacktraceOriginalFn","instrumented","apply","deinstrument","report","errorMsg","setRequestHeader","reportPayload","stringify","MessageFormatUtils","date","lpad","chars","padWith","howMany","res","fullYear","d","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","millis","getMilliseconds","ds","msg","addStack","logFormat","renderDate","isResolvedErrorMessage","categories","actualStringMsg","dataString","messageOrLogData","logData","errorAsStack","format","logGroupRule","loggerName","ST.fromError","frames","stackStr","frame","catch","LogMessageInternalImpl","_loggerName","_message","_errorAsStack","_error","_logGroupRule","_date","_level","_ready","ready","AbstractLogger","_name","_log","_logGroupRuntimeSettings","_open","_allMessages","clear","renderDefaultLog4jMessage","formatterLogMessage","addTail","createMessage","Date","processMessages","errorResult","message_1","renderError","_this","msgs","getSize","getHead","removeHead","doLog","logGroupRuntimeSettings","tslib_1.__extends","ConsoleLoggerImpl","console","logged","logLevel","messageFormatter","_getMessageFormatter","createDefaultLogMessage","info","warn","log","_super","MessageBufferLoggerImpl","messages","close","fullMsg","LogGroupRuntimeSettings","_loggerType","_logFormat","_callBackLogger","_formatterLogMessage","loggerType","callBackLogger","LoggerFactoryImpl","options","closeLoggers","_loggerToLogGroupSettings","_logGroupRuntimeSettingsIndexed","logGroupRules","named","enabled","logger","_loggers","loadLogger","put","forEachValue","nameLogger","regExp","Console","MessageBuffer","Custom","configure","CategoryLogMessageImpl","_categories","_resolvedErrorMessage","AbstractCategoryLogger","_i","rootCategory","renderDefaultMessage","categorySettings","runtimeSettings","getCategorySettings","resolved","_logInternal","logCategories","category","settings","this_1","getCategoryPath","actualError","logMessage","resolvedErrorMessage","allMessages","logMessage_1","setReady","isReady","CategoryConsoleLoggerImpl","messageAsString","CategoryDelegateLoggerImpl","_delegate","_a","finest","finer","fine","config","warning","severe","delegate","CategoryExtensionLoggerImpl","ExtensionHelper","sendCategoryLogMessage","CategoryMessageBufferLoggerImpl","CategoryRuntimeSettings","_category","_logLevel","CategoryConfiguration","CategoryServiceImpl","_INSTANCE","createOrGetCategoryState","_mapState","setDefaultConfiguration","currentRuntimeSettings","originalRuntimeSettings","reset","_defaultConfig","state","updateSettings","applyChildren","children","child","setConfigurationCategory","exists","getCategoryKey","enableForExtension","parent","id","newState","createState","CategoryState","cat","createLogger","register","_lazyState","getLogger","getOriginalRuntimeSettings","getCurrentRuntimeSettings","defaultConfig","LazyState","_logger","loadLoggerOnDemand","_delegateLogger","_originalRuntimeSettings","_currentRuntimeSettings","_wrappedLogger","isLoaded","_createLogger","initNewSettings","defSettings","registered","listener","evt","processMessageFromExtension","removeEventListener","addEventListener","from","type","enableExtensionIntegration","valueRequest","catsApplied","applyLogLevel","categoryId","recursive","sendCategoriesRuntimeUpdateMessage","formattedMessage","sendMessage","service","getInstance","catLevels","catSettings","getRootCategories","getCategoryAsJSON","parentId","cats","getCategoryById","_applyLogLevelRecursive","fromString","addCats","allCats","catChild","postMessage","sendRootCategoriesToExtension","getAllCategories","LogGroupRule","_regExp","LoggerFactoryOptions","rule","_logGroupRules","_enabled","LFServiceImpl","_nameCounter","createNamedLoggerFactory","_mapFactories","createDefaultOptions","nameLoggerFactory","idLogGroupRule","getLogGroupRuntimeSettingsByIndex","addLogGroupRule","LFService","INSTANCE_SERVICE","createLoggerFactory","DEFAULT_LOGGER_FACTORY_NAME","getDefault","DEFAULT_LOGGER_FACTORY","LoggerControlImpl","_help","rtSettingsFactories","_getRuntimeSettingsLoggerFactories","appendLine","rtSettingsFactory","append","getName","idx_1","item","result_1","setting","getLogGroupRuntimeSettings","g","groupSetting","idFactory","loggerFactoriesSettings","LoggerFactoryControlImpl","_getSettings","getRuntimeSettingsForLoggerFactories","getRuntimeSettings","_example","_settings","logGroupRuntimeSetting","addResult","_getLogGroupRunTimeSettingsFor","group","showTimestamp","idGroup","settings_1","_checkIndex","CategoryServiceControlImpl","_getCategoryService","_getCategories","_processCategory","applyChanges","_applyToCategory","original","getOriginalCategorySettings","indent","idCategory","Category","_parent","_children","loadCategoryLogger","_id","currentId","nextId","registerCategory","CategoryServiceFactory","root","JSONTypeImpl","getValue","JSONStringType","JSONArrayType","JSONNullType","JSONTypeConverter","JSONNumberType","JSONBooleanType","JSONObject","JSONObjectType","checkName","checkValue","object","pretty","comma","buffer","JSONArray","objects","toJSONType","JSONHelper","arr","_categoryToJSON","addArray","addNumber","addString","addNull"],"mappings":"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"}